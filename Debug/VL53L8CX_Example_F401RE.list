
VL53L8CX_Example_F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000158f0  08006724  08006724  00007724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c014  0801c014  0001e068  2**0
                  CONTENTS
  4 .ARM          00000008  0801c014  0801c014  0001d014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c01c  0801c01c  0001e068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c01c  0801c01c  0001d01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c020  0801c020  0001d020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0801c024  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  20000068  0801c08c  0001e068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001284  0801c08c  0001e284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c61b  00000000  00000000  0001e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc8  00000000  00000000  0002a6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002c480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c4  00000000  00000000  0002cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017297  00000000  00000000  0002d884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef39  00000000  00000000  00044b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab87  00000000  00000000  00053a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de5db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  000de620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000e1c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800670c 	.word	0x0800670c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800670c 	.word	0x0800670c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)

#endif

PUTCHAR_PROTOTYPE
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <__io_putchar+0x20>)
 8000582:	f004 fd6b 	bl	800505c <HAL_UART_Transmit>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000d8 	.word	0x200000d8

08000594 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==INT_C_Pin)
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	2b10      	cmp	r3, #16
 80005a2:	d104      	bne.n	80005ae <HAL_GPIO_EXTI_Callback+0x1a>
	{
		IntCount++;
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <HAL_GPIO_EXTI_Callback+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	4a04      	ldr	r2, [pc, #16]	@ (80005bc <HAL_GPIO_EXTI_Callback+0x28>)
 80005ac:	6013      	str	r3, [r2, #0]
	}
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000124 	.word	0x20000124

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f002 fb7a 	bl	8002cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f85c 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f91e 	bl	800080c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005d0:	f000 f8c4 	bl	800075c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f8f0 	bl	80007b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	Dev.platform.address = VL53L8CX_DEFAULT_I2C_ADDRESS;
 80005d8:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <main+0xa8>)
 80005da:	2252      	movs	r2, #82	@ 0x52
 80005dc:	801a      	strh	r2, [r3, #0]

	Reset_Sensor(&(Dev.platform));
 80005de:	4822      	ldr	r0, [pc, #136]	@ (8000668 <main+0xa8>)
 80005e0:	f000 fb04 	bl	8000bec <Reset_Sensor>

	status = vl53l8cx_is_alive(&Dev, &isAlive);
 80005e4:	4921      	ldr	r1, [pc, #132]	@ (800066c <main+0xac>)
 80005e6:	4820      	ldr	r0, [pc, #128]	@ (8000668 <main+0xa8>)
 80005e8:	f001 f912 	bl	8001810 <vl53l8cx_is_alive>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <main+0xb0>)
 80005f2:	601a      	str	r2, [r3, #0]
	if(!isAlive)
 80005f4:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <main+0xac>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d107      	bne.n	800060c <main+0x4c>
	{
		printf("VL53L8CX not detected at requested address (0x%x)\r\n", Dev.platform.address);
 80005fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <main+0xa8>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	481c      	ldr	r0, [pc, #112]	@ (8000674 <main+0xb4>)
 8000604:	f005 f9a8 	bl	8005958 <iprintf>
		return 255;
 8000608:	23ff      	movs	r3, #255	@ 0xff
 800060a:	e02a      	b.n	8000662 <main+0xa2>
	}
	printf("Sensor initializing, please wait few seconds\r\n");
 800060c:	481a      	ldr	r0, [pc, #104]	@ (8000678 <main+0xb8>)
 800060e:	f005 fa0b 	bl	8005a28 <puts>
	status = vl53l8cx_init(&Dev);
 8000612:	4815      	ldr	r0, [pc, #84]	@ (8000668 <main+0xa8>)
 8000614:	f001 f946 	bl	80018a4 <vl53l8cx_init>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <main+0xb0>)
 800061e:	601a      	str	r2, [r3, #0]
	status = vl53l8cx_set_ranging_frequency_hz(&Dev, 2);				// Set 2Hz ranging frequency
 8000620:	2102      	movs	r1, #2
 8000622:	4811      	ldr	r0, [pc, #68]	@ (8000668 <main+0xa8>)
 8000624:	f002 f97d 	bl	8002922 <vl53l8cx_set_ranging_frequency_hz>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <main+0xb0>)
 800062e:	601a      	str	r2, [r3, #0]
	status = vl53l8cx_set_ranging_mode(&Dev, VL53L8CX_RANGING_MODE_CONTINUOUS);  // Set mode continuous
 8000630:	2101      	movs	r1, #1
 8000632:	480d      	ldr	r0, [pc, #52]	@ (8000668 <main+0xa8>)
 8000634:	f002 f996 	bl	8002964 <vl53l8cx_set_ranging_mode>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <main+0xb0>)
 800063e:	601a      	str	r2, [r3, #0]

	printf("Ranging starts\n");
 8000640:	480e      	ldr	r0, [pc, #56]	@ (800067c <main+0xbc>)
 8000642:	f005 f9f1 	bl	8005a28 <puts>
	status = vl53l8cx_start_ranging(&Dev);
 8000646:	4808      	ldr	r0, [pc, #32]	@ (8000668 <main+0xa8>)
 8000648:	f001 fd58 	bl	80020fc <vl53l8cx_start_ranging>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <main+0xb0>)
 8000652:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	printf("Zone;Nb targets;Ambient (Kcps/spads);Target Status;Distance (mm);");
 8000654:	480a      	ldr	r0, [pc, #40]	@ (8000680 <main+0xc0>)
 8000656:	f005 f97f 	bl	8005958 <iprintf>

	if (is_interrupt) {
		get_data_by_interrupt(&Dev);
	}
	else {
		get_data_by_polling(&Dev);
 800065a:	4803      	ldr	r0, [pc, #12]	@ (8000668 <main+0xa8>)
 800065c:	f000 f99c 	bl	8000998 <get_data_by_polling>
 8000660:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000662:	4618      	mov	r0, r3
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000012c 	.word	0x2000012c
 800066c:	2000112d 	.word	0x2000112d
 8000670:	20000120 	.word	0x20000120
 8000674:	08006724 	.word	0x08006724
 8000678:	08006758 	.word	0x08006758
 800067c:	08006788 	.word	0x08006788
 8000680:	08006798 	.word	0x08006798

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	@ 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	@ 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 faa8 	bl	8005be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <SystemClock_Config+0xd0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	4a28      	ldr	r2, [pc, #160]	@ (8000754 <SystemClock_Config+0xd0>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <SystemClock_Config+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <SystemClock_Config+0xd4>)
 80006d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f8:	2310      	movs	r3, #16
 80006fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000700:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000702:	2304      	movs	r3, #4
 8000704:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000706:	2307      	movs	r3, #7
 8000708:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	4618      	mov	r0, r3
 8000710:	f003 ffbc 	bl	800468c <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800071a:	f000 f9b3 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2302      	movs	r3, #2
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2102      	movs	r1, #2
 800073a:	4618      	mov	r0, r3
 800073c:	f004 fa1e 	bl	8004b7c <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000746:	f000 f99d 	bl	8000a84 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	@ 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000762:	4a13      	ldr	r2, [pc, #76]	@ (80007b0 <MX_I2C1_Init+0x54>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000768:	4a12      	ldr	r2, [pc, #72]	@ (80007b4 <MX_I2C1_Init+0x58>)
 800076a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_I2C1_Init+0x50>)
 800077a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800077e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_I2C1_Init+0x50>)
 800079a:	f002 fded 	bl	8003378 <HAL_I2C_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a4:	f000 f96e 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000084 	.word	0x20000084
 80007b0:	40005400 	.word	0x40005400
 80007b4:	00061a80 	.word	0x00061a80

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <MX_USART2_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f004 fbe4 	bl	8004fbc <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 f943 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000d8 	.word	0x200000d8
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b58      	ldr	r3, [pc, #352]	@ (8000988 <MX_GPIO_Init+0x17c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a57      	ldr	r2, [pc, #348]	@ (8000988 <MX_GPIO_Init+0x17c>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b55      	ldr	r3, [pc, #340]	@ (8000988 <MX_GPIO_Init+0x17c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b51      	ldr	r3, [pc, #324]	@ (8000988 <MX_GPIO_Init+0x17c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a50      	ldr	r2, [pc, #320]	@ (8000988 <MX_GPIO_Init+0x17c>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b4e      	ldr	r3, [pc, #312]	@ (8000988 <MX_GPIO_Init+0x17c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b4a      	ldr	r3, [pc, #296]	@ (8000988 <MX_GPIO_Init+0x17c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a49      	ldr	r2, [pc, #292]	@ (8000988 <MX_GPIO_Init+0x17c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b47      	ldr	r3, [pc, #284]	@ (8000988 <MX_GPIO_Init+0x17c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b43      	ldr	r3, [pc, #268]	@ (8000988 <MX_GPIO_Init+0x17c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a42      	ldr	r2, [pc, #264]	@ (8000988 <MX_GPIO_Init+0x17c>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b40      	ldr	r3, [pc, #256]	@ (8000988 <MX_GPIO_Init+0x17c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LPn_L_Pin|LPn_R_Pin|PWR_EN_R_Pin|PWR_EN_C_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	21e1      	movs	r1, #225	@ 0xe1
 8000896:	483d      	ldr	r0, [pc, #244]	@ (800098c <MX_GPIO_Init+0x180>)
 8000898:	f002 fd3c 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LPn_C_Pin|PWR_EN_L_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f240 4101 	movw	r1, #1025	@ 0x401
 80008a2:	483b      	ldr	r0, [pc, #236]	@ (8000990 <MX_GPIO_Init+0x184>)
 80008a4:	f002 fd36 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin INT_L_Pin */
  GPIO_InitStruct.Pin = B1_Pin|INT_L_Pin;
 80008a8:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4835      	ldr	r0, [pc, #212]	@ (8000994 <MX_GPIO_Init+0x188>)
 80008c0:	f002 fba4 	bl	800300c <HAL_GPIO_Init>

  /*Configure GPIO pin : LPn_L_Pin */
  GPIO_InitStruct.Pin = LPn_L_Pin;
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LPn_L_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	482c      	ldr	r0, [pc, #176]	@ (800098c <MX_GPIO_Init+0x180>)
 80008dc:	f002 fb96 	bl	800300c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_C_Pin */
  GPIO_InitStruct.Pin = INT_C_Pin;
 80008e0:	2310      	movs	r3, #16
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_C_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4825      	ldr	r0, [pc, #148]	@ (800098c <MX_GPIO_Init+0x180>)
 80008f6:	f002 fb89 	bl	800300c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn_R_Pin PWR_EN_R_Pin PWR_EN_C_Pin */
  GPIO_InitStruct.Pin = LPn_R_Pin|PWR_EN_R_Pin|PWR_EN_C_Pin;
 80008fa:	23e0      	movs	r3, #224	@ 0xe0
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	481e      	ldr	r0, [pc, #120]	@ (800098c <MX_GPIO_Init+0x180>)
 8000912:	f002 fb7b 	bl	800300c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn_C_Pin PWR_EN_L_Pin */
  GPIO_InitStruct.Pin = LPn_C_Pin|PWR_EN_L_Pin;
 8000916:	f240 4301 	movw	r3, #1025	@ 0x401
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4818      	ldr	r0, [pc, #96]	@ (8000990 <MX_GPIO_Init+0x184>)
 8000930:	f002 fb6c 	bl	800300c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_R_Pin */
  GPIO_InitStruct.Pin = INT_R_Pin;
 8000934:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_R_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4810      	ldr	r0, [pc, #64]	@ (800098c <MX_GPIO_Init+0x180>)
 800094c:	f002 fb5e 	bl	800300c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	200a      	movs	r0, #10
 8000956:	f002 fb22 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800095a:	200a      	movs	r0, #10
 800095c:	f002 fb3b 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2017      	movs	r0, #23
 8000966:	f002 fb1a 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800096a:	2017      	movs	r0, #23
 800096c:	f002 fb33 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2028      	movs	r0, #40	@ 0x28
 8000976:	f002 fb12 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800097a:	2028      	movs	r0, #40	@ 0x28
 800097c:	f002 fb2b 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	@ 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000
 8000990:	40020400 	.word	0x40020400
 8000994:	40020800 	.word	0x40020800

08000998 <get_data_by_polling>:
		}
	}while(1);
}


void get_data_by_polling(VL53L8CX_Configuration *p_dev){
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	do
	{
		status = vl53l8cx_check_data_ready(&Dev, &p_data_ready);
 80009a0:	492f      	ldr	r1, [pc, #188]	@ (8000a60 <get_data_by_polling+0xc8>)
 80009a2:	4830      	ldr	r0, [pc, #192]	@ (8000a64 <get_data_by_polling+0xcc>)
 80009a4:	f001 fd40 	bl	8002428 <vl53l8cx_check_data_ready>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000a68 <get_data_by_polling+0xd0>)
 80009ae:	601a      	str	r2, [r3, #0]
		if(p_data_ready){
 80009b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <get_data_by_polling+0xc8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d04e      	beq.n	8000a56 <get_data_by_polling+0xbe>
			status = vl53l8cx_get_resolution(p_dev, &resolution);
 80009b8:	492c      	ldr	r1, [pc, #176]	@ (8000a6c <get_data_by_polling+0xd4>)
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f001 ff8c 	bl	80028d8 <vl53l8cx_get_resolution>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <get_data_by_polling+0xd0>)
 80009c6:	601a      	str	r2, [r3, #0]
			status = vl53l8cx_get_ranging_data(p_dev, &Results);
 80009c8:	4929      	ldr	r1, [pc, #164]	@ (8000a70 <get_data_by_polling+0xd8>)
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f001 fd7c 	bl	80024c8 <vl53l8cx_get_ranging_data>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <get_data_by_polling+0xd0>)
 80009d6:	601a      	str	r2, [r3, #0]

			// TODO: add to outBuffer
			printf(";;;;;\r\n");
 80009d8:	4826      	ldr	r0, [pc, #152]	@ (8000a74 <get_data_by_polling+0xdc>)
 80009da:	f005 f825 	bl	8005a28 <puts>

			for(int i = 0; i < resolution;i++){
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	e031      	b.n	8000a48 <get_data_by_polling+0xb0>
				/* Print per zone results */
				printf("%d;%u;%lu;",
						i,
						Results.nb_target_detected[i],
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <get_data_by_polling+0xd8>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80009ee:	781b      	ldrb	r3, [r3, #0]
				printf("%d;%u;%lu;",
 80009f0:	4619      	mov	r1, r3
 80009f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a70 <get_data_by_polling+0xd8>)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	460a      	mov	r2, r1
 80009fe:	68f9      	ldr	r1, [r7, #12]
 8000a00:	481d      	ldr	r0, [pc, #116]	@ (8000a78 <get_data_by_polling+0xe0>)
 8000a02:	f004 ffa9 	bl	8005958 <iprintf>
						Results.ambient_per_spad[i]);

				/* Print per target results */
				if(Results.nb_target_detected[i] > 0){
 8000a06:	4a1a      	ldr	r2, [pc, #104]	@ (8000a70 <get_data_by_polling+0xd8>)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d012      	beq.n	8000a3c <get_data_by_polling+0xa4>
					printf("%u;%d;\r\n",
							Results.target_status[VL53L8CX_NB_TARGET_PER_ZONE * i],
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4a15      	ldr	r2, [pc, #84]	@ (8000a70 <get_data_by_polling+0xd8>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
					printf("%u;%d;\r\n",
 8000a20:	4619      	mov	r1, r3
							Results.distance_mm[VL53L8CX_NB_TARGET_PER_ZONE * i]);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <get_data_by_polling+0xd8>)
 8000a26:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					printf("%u;%d;\r\n",
 8000a32:	461a      	mov	r2, r3
 8000a34:	4811      	ldr	r0, [pc, #68]	@ (8000a7c <get_data_by_polling+0xe4>)
 8000a36:	f004 ff8f 	bl	8005958 <iprintf>
 8000a3a:	e002      	b.n	8000a42 <get_data_by_polling+0xaa>
				}else{
					printf(";255;-;\r\n");
 8000a3c:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <get_data_by_polling+0xe8>)
 8000a3e:	f004 fff3 	bl	8005a28 <puts>
			for(int i = 0; i < resolution;i++){
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3301      	adds	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <get_data_by_polling+0xd4>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4293      	cmp	r3, r2
 8000a52:	dbc7      	blt.n	80009e4 <get_data_by_polling+0x4c>
 8000a54:	e7a4      	b.n	80009a0 <get_data_by_polling+0x8>
				}
			}

			// printf(outBuffer);
		}else{
			HAL_Delay(5);
 8000a56:	2005      	movs	r0, #5
 8000a58:	f002 f9a2 	bl	8002da0 <HAL_Delay>
		status = vl53l8cx_check_data_ready(&Dev, &p_data_ready);
 8000a5c:	e7a0      	b.n	80009a0 <get_data_by_polling+0x8>
 8000a5e:	bf00      	nop
 8000a60:	20000128 	.word	0x20000128
 8000a64:	2000012c 	.word	0x2000012c
 8000a68:	20000120 	.word	0x20000120
 8000a6c:	2000112c 	.word	0x2000112c
 8000a70:	20000bdc 	.word	0x20000bdc
 8000a74:	08006834 	.word	0x08006834
 8000a78:	0800683c 	.word	0x0800683c
 8000a7c:	08006848 	.word	0x08006848
 8000a80:	08006854 	.word	0x08006854

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <RdByte>:

uint8_t RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af02      	add	r7, sp, #8
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	817b      	strh	r3, [r7, #10]
	uint8_t status = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000aa2:	897b      	ldrh	r3, [r7, #10]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8000aac:	897b      	ldrh	r3, [r7, #10]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	8819      	ldrh	r1, [r3, #0]
 8000ab6:	f107 0214 	add.w	r2, r7, #20
 8000aba:	2364      	movs	r3, #100	@ 0x64
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2302      	movs	r3, #2
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <RdByte+0x64>)
 8000ac2:	f002 fd9d 	bl	8003600 <HAL_I2C_Master_Transmit>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(&hi2c1, p_platform->address, data_read, 1, 100);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	8819      	ldrh	r1, [r3, #0]
 8000ace:	f107 0210 	add.w	r2, r7, #16
 8000ad2:	2364      	movs	r3, #100	@ 0x64
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	4806      	ldr	r0, [pc, #24]	@ (8000af4 <RdByte+0x64>)
 8000ada:	f002 fe8f 	bl	80037fc <HAL_I2C_Master_Receive>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 8000ae2:	7c3a      	ldrb	r2, [r7, #16]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	701a      	strb	r2, [r3, #0]
  
	return status;
 8000ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000084 	.word	0x20000084

08000af8 <WrByte>:

uint8_t WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	uint8_t status = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8000b1c:	787b      	ldrb	r3, [r7, #1]
 8000b1e:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1,p_platform->address, data_write, 3, 100);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	8819      	ldrh	r1, [r3, #0]
 8000b24:	f107 020c 	add.w	r2, r7, #12
 8000b28:	2364      	movs	r3, #100	@ 0x64
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <WrByte+0x4c>)
 8000b30:	f002 fd66 	bl	8003600 <HAL_I2C_Master_Transmit>
 8000b34:	4603      	mov	r3, r0
 8000b36:	73fb      	strb	r3, [r7, #15]

	return status;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000084 	.word	0x20000084

08000b48 <WrMulti>:
uint8_t WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	460b      	mov	r3, r1
 8000b56:	817b      	strh	r3, [r7, #10]
	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress,
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	8819      	ldrh	r1, [r3, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	897a      	ldrh	r2, [r7, #10]
 8000b62:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b66:	9002      	str	r0, [sp, #8]
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2310      	movs	r3, #16
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <WrMulti+0x3c>)
 8000b72:	f003 f875 	bl	8003c60 <HAL_I2C_Mem_Write>
 8000b76:	4603      	mov	r3, r0
 8000b78:	75fb      	strb	r3, [r7, #23]
									I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	return status;
 8000b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000084 	.word	0x20000084

08000b88 <RdMulti>:
uint8_t RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	460b      	mov	r3, r1
 8000b96:	817b      	strh	r3, [r7, #10]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8000b98:	897b      	ldrh	r3, [r7, #10]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8000ba2:	897b      	ldrh	r3, [r7, #10]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	8819      	ldrh	r1, [r3, #0]
 8000bac:	f107 0214 	add.w	r2, r7, #20
 8000bb0:	2364      	movs	r3, #100	@ 0x64
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <RdMulti+0x60>)
 8000bb8:	f002 fd22 	bl	8003600 <HAL_I2C_Master_Transmit>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	75fb      	strb	r3, [r7, #23]
	status += HAL_I2C_Master_Receive(&hi2c1, p_platform->address, p_values, size, 100);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	8819      	ldrh	r1, [r3, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	2264      	movs	r2, #100	@ 0x64
 8000bca:	9200      	str	r2, [sp, #0]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <RdMulti+0x60>)
 8000bd0:	f002 fe14 	bl	80037fc <HAL_I2C_Master_Receive>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	4413      	add	r3, r2
 8000bdc:	75fb      	strb	r3, [r7, #23]

	return status;
 8000bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000084 	.word	0x20000084

08000bec <Reset_Sensor>:

uint8_t Reset_Sensor(VL53L8CX_Platform *p_platform)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	/* Toggle EVK PWR EN board and Lpn pins */
	HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	481a      	ldr	r0, [pc, #104]	@ (8000c64 <Reset_Sensor+0x78>)
 8000bfa:	f002 fb8b 	bl	8003314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWR_EN_C_GPIO_Port, PWR_EN_C_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	4819      	ldr	r0, [pc, #100]	@ (8000c68 <Reset_Sensor+0x7c>)
 8000c04:	f002 fb86 	bl	8003314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LPn_R_GPIO_Port, LPn_R_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	4816      	ldr	r0, [pc, #88]	@ (8000c68 <Reset_Sensor+0x7c>)
 8000c0e:	f002 fb81 	bl	8003314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWR_EN_R_GPIO_Port, PWR_EN_R_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2140      	movs	r1, #64	@ 0x40
 8000c16:	4814      	ldr	r0, [pc, #80]	@ (8000c68 <Reset_Sensor+0x7c>)
 8000c18:	f002 fb7c 	bl	8003314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LPn_L_GPIO_Port, LPn_L_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4811      	ldr	r0, [pc, #68]	@ (8000c68 <Reset_Sensor+0x7c>)
 8000c22:	f002 fb77 	bl	8003314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWR_EN_L_GPIO_Port, PWR_EN_L_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c2c:	480d      	ldr	r0, [pc, #52]	@ (8000c64 <Reset_Sensor+0x78>)
 8000c2e:	f002 fb71 	bl	8003314 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c32:	2064      	movs	r0, #100	@ 0x64
 8000c34:	f002 f8b4 	bl	8002da0 <HAL_Delay>

	HAL_GPIO_WritePin(PWR_EN_C_GPIO_Port, PWR_EN_C_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2180      	movs	r1, #128	@ 0x80
 8000c3c:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <Reset_Sensor+0x7c>)
 8000c3e:	f002 fb69 	bl	8003314 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c42:	2064      	movs	r0, #100	@ 0x64
 8000c44:	f002 f8ac 	bl	8002da0 <HAL_Delay>
	HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <Reset_Sensor+0x78>)
 8000c4e:	f002 fb61 	bl	8003314 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c52:	2064      	movs	r0, #100	@ 0x64
 8000c54:	f002 f8a4 	bl	8002da0 <HAL_Delay>
	return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40020400 	.word	0x40020400
 8000c68:	40020000 	.word	0x40020000

08000c6c <SwapBuffer>:

void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e021      	b.n	8000cc2 <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	440b      	add	r3, r1
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	041b      	lsls	r3, r3, #16
 8000c94:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	3203      	adds	r2, #3
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	440a      	add	r2, r1
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	4313      	orrs	r3, r2
		tmp = (
 8000cb0:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d3d9      	bcc.n	8000c7e <SwapBuffer+0x12>
	}
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <WaitMs>:

uint8_t WaitMs(
		VL53L8CX_Platform *p_platform,
               uint32_t TimeMs)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 8000ce2:	6838      	ldr	r0, [r7, #0]
 8000ce4:	f002 f85c 	bl	8002da0 <HAL_Delay>
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	4a0f      	ldr	r2, [pc, #60]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d32:	2007      	movs	r0, #7
 8000d34:	f002 f928 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <HAL_I2C_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12c      	bne.n	8000dc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a17      	ldr	r2, [pc, #92]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d94:	2304      	movs	r3, #4
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <HAL_I2C_MspInit+0x8c>)
 8000da0:	f002 f934 	bl	800300c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000dae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000db2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	@ 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a19      	ldr	r2, [pc, #100]	@ (8000e58 <HAL_UART_MspInit+0x84>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d12b      	bne.n	8000e4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e2e:	230c      	movs	r3, #12
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e4a:	f002 f8df 	bl	800300c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	@ 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40004400 	.word	0x40004400
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <NMI_Handler+0x4>

08000e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eba:	f001 ff51 	bl	8002d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_C_Pin);
 8000ec6:	2010      	movs	r0, #16
 8000ec8:	f002 fa3e 	bl	8003348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_L_Pin);
 8000ed4:	2080      	movs	r0, #128	@ 0x80
 8000ed6:	f002 fa37 	bl	8003348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}

08000ede <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_R_Pin);
 8000ee2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000ee6:	f002 fa2f 	bl	8003348 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000eea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000eee:	f002 fa2b 	bl	8003348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e00a      	b.n	8000f1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f08:	f3af 8000 	nop.w
 8000f0c:	4601      	mov	r1, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	60ba      	str	r2, [r7, #8]
 8000f14:	b2ca      	uxtb	r2, r1
 8000f16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dbf0      	blt.n	8000f08 <_read+0x12>
	}

return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e009      	b.n	8000f56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	60ba      	str	r2, [r7, #8]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fb10 	bl	8000570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbf1      	blt.n	8000f42 <_write+0x12>
	}
	return len;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_close>:

int _close(int file)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	return -1;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f90:	605a      	str	r2, [r3, #4]
	return 0;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_isatty>:

int _isatty(int file)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	return 1;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
	return 0;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	@ (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f004 fe40 	bl	8005c84 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20018000 	.word	0x20018000
 8001030:	00000400 	.word	0x00000400
 8001034:	20001130 	.word	0x20001130
 8001038:	20001288 	.word	0x20001288

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <SystemInit+0x28>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001046:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <SystemInit+0x28>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <SystemInit+0x28>)
 8001052:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001056:	609a      	str	r2, [r3, #8]
#endif
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800106c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800106e:	e003      	b.n	8001078 <LoopCopyDataInit>

08001070 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001072:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001074:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001076:	3104      	adds	r1, #4

08001078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001078:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800107c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800107e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001080:	d3f6      	bcc.n	8001070 <CopyDataInit>
  ldr  r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	@ (80010b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001084:	e002      	b.n	800108c <LoopFillZerobss>

08001086 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001086:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001088:	f842 3b04 	str.w	r3, [r2], #4

0800108c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800108e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001090:	d3f9      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001092:	f7ff ffd3 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f004 fdfb 	bl	8005c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fa91 	bl	80005c0 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80010a4:	0801c024 	.word	0x0801c024
  ldr  r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010ac:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80010b0:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80010b4:	20001284 	.word	0x20001284

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>

080010ba <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	4608      	mov	r0, r1
 80010c4:	4611      	mov	r1, r2
 80010c6:	461a      	mov	r2, r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	70fb      	strb	r3, [r7, #3]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70bb      	strb	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 80010dc:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= RdMulti(&(p_dev->platform), address,
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	8839      	ldrh	r1, [r7, #0]
 80010e8:	f7ff fd4e 	bl	8000b88 <RdMulti>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	210a      	movs	r1, #10
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fdec 	bl	8000cd8 <WaitMs>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	4313      	orrs	r3, r2
 8001108:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	2bc7      	cmp	r3, #199	@ 0xc7
 800110e:	d904      	bls.n	800111a <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
			break;
 8001118:	e01a      	b.n	8001150 <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d909      	bls.n	8001134 <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8001126:	2b7e      	cmp	r3, #126	@ 0x7e
 8001128:	d904      	bls.n	8001134 <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8001130:	73fb      	strb	r3, [r7, #15]
			break;
 8001132:	e00d      	b.n	8001150 <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	3301      	adds	r3, #1
 8001138:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 800113a:	78bb      	ldrb	r3, [r7, #2]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8001144:	7e3b      	ldrb	r3, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	7f3a      	ldrb	r2, [r7, #28]
 800114c:	429a      	cmp	r2, r3
 800114e:	d1c5      	bne.n	80010dc <_vl53l8cx_poll_for_answer+0x22>

	return status;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f107 020b 	add.w	r2, r7, #11
 8001170:	2106      	movs	r1, #6
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fc8c 	bl	8000a90 <RdByte>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	4313      	orrs	r3, r2
 8001180:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8001182:	7afb      	ldrb	r3, [r7, #11]
 8001184:	b25b      	sxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	da10      	bge.n	80011ac <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f107 020a 	add.w	r2, r7, #10
 8001190:	2107      	movs	r1, #7
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fc7c 	bl	8000a90 <RdByte>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	4313      	orrs	r3, r2
 80011a0:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 80011a2:	7abb      	ldrb	r3, [r7, #10]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d111      	bne.n	80011d0 <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)WaitMs(&(p_dev->platform), 1);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2101      	movs	r1, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fd91 	bl	8000cd8 <WaitMs>
		timeout++;
 80011b6:	89bb      	ldrh	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d106      	bne.n	80011d4 <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 80011c6:	89bb      	ldrh	r3, [r7, #12]
 80011c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011cc:	d3cd      	bcc.n	800116a <_vl53l8cx_poll_for_mcu_boot+0x10>
 80011ce:	e002      	b.n	80011d6 <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 80011d0:	bf00      	nop
 80011d2:	e000      	b.n	80011d6 <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 80011d4:	bf00      	nop

   return status;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0ea      	sub	sp, #424	@ 0x1a8
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80011ee:	6018      	str	r0, [r3, #0]
 80011f0:	460a      	mov	r2, r1
 80011f2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011f6:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80011fa:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8001202:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001206:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800120a:	4ad9      	ldr	r2, [pc, #868]	@ (8001570 <_vl53l8cx_send_offset_data+0x390>)
 800120c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001210:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8001214:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001218:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800121c:	4ad5      	ldr	r2, [pc, #852]	@ (8001574 <_vl53l8cx_send_offset_data+0x394>)
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8001226:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800122a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 8001234:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001238:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 8001240:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001244:	4619      	mov	r1, r3
 8001246:	f004 fd4a 	bl	8005cde <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 800124a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800124e:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b10      	cmp	r3, #16
 8001256:	f040 8122 	bne.w	800149e <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800125a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800125e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8001268:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800126c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001270:	cb03      	ldmia	r3!, {r0, r1}
 8001272:	6010      	str	r0, [r2, #0]
 8001274:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8001276:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800127a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001284:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fcef 	bl	8000c6c <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800128e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001292:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 800129c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80012a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a4:	4618      	mov	r0, r3
 80012a6:	f004 fd1a 	bl	8005cde <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 80012aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	2280      	movs	r2, #128	@ 0x80
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 fd0d 	bl	8005cde <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80012ca:	e0ac      	b.n	8001426 <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 80012d2:	e09c      	b.n	800140e <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 80012d4:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80012d8:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	005a      	lsls	r2, r3, #1
 80012e2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 80012ee:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80012f2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	1c59      	adds	r1, r3, #1
 80012fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001306:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800130a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 800130c:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001310:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	3304      	adds	r3, #4
 800131a:	0059      	lsls	r1, r3, #1
 800131c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001324:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001328:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 800132a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800132e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	f103 0109 	add.w	r1, r3, #9
 800133c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001344:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001348:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800134a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800134e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8001356:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001358:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800135c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8001364:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001368:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	005a      	lsls	r2, r3, #1
 8001372:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001376:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800137a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800137e:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8001380:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001384:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001394:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001398:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800139c:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 800139e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80013a2:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80013a6:	00d2      	lsls	r2, r2, #3
 80013a8:	440a      	add	r2, r1
 80013aa:	3204      	adds	r2, #4
 80013ac:	0051      	lsls	r1, r2, #1
 80013ae:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80013b2:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80013b6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80013ba:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 80013bc:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80013c0:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80013c4:	00d2      	lsls	r2, r2, #3
 80013c6:	440a      	add	r2, r1
 80013c8:	0052      	lsls	r2, r2, #1
 80013ca:	f102 0109 	add.w	r1, r2, #9
 80013ce:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80013d2:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80013d6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80013da:	4413      	add	r3, r2
                                  /(int16_t)4;
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da00      	bge.n	80013e2 <_vl53l8cx_send_offset_data+0x202>
 80013e0:	3303      	adds	r3, #3
 80013e2:	109b      	asrs	r3, r3, #2
 80013e4:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 80013e6:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80013ea:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	441a      	add	r2, r3
 80013f2:	b209      	sxth	r1, r1
 80013f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80013f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80013fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8001400:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8001404:	b2db      	uxtb	r3, r3
 8001406:	3301      	adds	r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800140e:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8001412:	2b03      	cmp	r3, #3
 8001414:	f77f af5e 	ble.w	80012d4 <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8001418:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800141c:	b2db      	uxtb	r3, r3
 800141e:	3301      	adds	r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8001426:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800142a:	2b03      	cmp	r3, #3
 800142c:	f77f af4e 	ble.w	80012cc <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	3320      	adds	r3, #32
 8001436:	2260      	movs	r2, #96	@ 0x60
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f004 fbd4 	bl	8005be8 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8001440:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001444:	3340      	adds	r3, #64	@ 0x40
 8001446:	22c0      	movs	r2, #192	@ 0xc0
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f004 fbcc 	bl	8005be8 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8001450:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001454:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 800145e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8001462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fc39 	bl	8005cde <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 800146c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001470:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800147a:	f107 0118 	add.w	r1, r7, #24
 800147e:	2280      	movs	r2, #128	@ 0x80
 8001480:	4618      	mov	r0, r3
 8001482:	f004 fc2c 	bl	8005cde <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8001486:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800148a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001494:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fbe7 	bl	8000c6c <SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800149e:	2300      	movs	r3, #0
 80014a0:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80014a4:	e01b      	b.n	80014de <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 80014a6:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80014aa:	f103 0208 	add.w	r2, r3, #8
 80014ae:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80014b2:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80014b6:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80014ba:	6809      	ldr	r1, [r1, #0]
 80014bc:	440a      	add	r2, r1
 80014be:	f892 1500 	ldrb.w	r1, [r2, #1280]	@ 0x500
 80014c2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80014c6:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	460a      	mov	r2, r1
 80014d0:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80014d4:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80014d8:	3301      	adds	r3, #1
 80014da:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80014de:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80014e2:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 80014e6:	d3de      	bcc.n	80014a6 <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 80014e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80014ec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 62dc 	add.w	r2, r3, #1760	@ 0x6e0
 80014f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80014fa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80014fe:	cb03      	ldmia	r3!, {r0, r1}
 8001500:	6010      	str	r0, [r2, #0]
 8001502:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8001504:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001508:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001512:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 800151c:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8001520:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8001524:	f7ff fb10 	bl	8000b48 <WrMulti>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8001530:	4313      	orrs	r3, r2
 8001532:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8001536:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800153a:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 800153e:	2303      	movs	r3, #3
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	23ff      	movs	r3, #255	@ 0xff
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800154a:	2201      	movs	r2, #1
 800154c:	2104      	movs	r1, #4
 800154e:	6800      	ldr	r0, [r0, #0]
 8001550:	f7ff fdb3 	bl	80010ba <_vl53l8cx_poll_for_answer>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 800155c:	4313      	orrs	r3, r2
 800155e:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001562:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8001566:	4618      	mov	r0, r3
 8001568:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	08006860 	.word	0x08006860
 8001574:	08006868 	.word	0x08006868

08001578 <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0ca      	sub	sp, #296	@ 0x128
 800157c:	af02      	add	r7, sp, #8
 800157e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001582:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001586:	6018      	str	r0, [r3, #0]
 8001588:	460a      	mov	r2, r1
 800158a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800158e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8001592:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800159a:	4a9a      	ldr	r2, [pc, #616]	@ (8001804 <_vl53l8cx_send_xtalk_data+0x28c>)
 800159c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80015a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 80015a8:	4a97      	ldr	r2, [pc, #604]	@ (8001808 <_vl53l8cx_send_xtalk_data+0x290>)
 80015aa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80015ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80015b6:	4b95      	ldr	r3, [pc, #596]	@ (800180c <_vl53l8cx_send_xtalk_data+0x294>)
 80015b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 80015bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
 80015ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80015d8:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80015dc:	4619      	mov	r1, r3
 80015de:	f004 fb7e 	bl	8005cde <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 80015e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015e6:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b10      	cmp	r3, #16
 80015ee:	f040 80d2 	bne.w	8001796 <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80015f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8001600:	461a      	mov	r2, r3
 8001602:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001606:	cb03      	ldmia	r3!, {r0, r1}
 8001608:	6010      	str	r0, [r2, #0]
 800160a:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 800160c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001610:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 800161a:	461a      	mov	r2, r3
 800161c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001620:	cb03      	ldmia	r3!, {r0, r1}
 8001622:	6010      	str	r0, [r2, #0]
 8001624:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8001626:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800162a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001634:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fb17 	bl	8000c6c <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 800163e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001642:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f203 5134 	addw	r1, r3, #1332	@ 0x534
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fb42 	bl	8005cde <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800165a:	2300      	movs	r3, #0
 800165c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001660:	e05d      	b.n	800171e <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8001668:	e04e      	b.n	8001708 <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800166a:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 800166e:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	005a      	lsls	r2, r3, #1
 8001678:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800167c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001680:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8001684:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001688:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	1c59      	adds	r1, r3, #1
 8001694:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001698:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800169c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016a0:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80016a2:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80016a6:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3304      	adds	r3, #4
 80016b0:	0059      	lsls	r1, r3, #1
 80016b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016be:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80016c0:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80016c4:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	f103 0109 	add.w	r1, r3, #9
 80016d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016de:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80016e0:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80016e4:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80016ec:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80016ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016f2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80016fa:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8001708:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800170c:	2b03      	cmp	r3, #3
 800170e:	ddac      	ble.n	800166a <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8001710:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3301      	adds	r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800171e:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001722:	2b03      	cmp	r3, #3
 8001724:	dd9d      	ble.n	8001662 <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	3340      	adds	r3, #64	@ 0x40
 800172c:	22c0      	movs	r2, #192	@ 0xc0
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f004 fa59 	bl	8005be8 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8001736:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800173a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 8001744:	f107 0108 	add.w	r1, r7, #8
 8001748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800174c:	4618      	mov	r0, r3
 800174e:	f004 fac6 	bl	8005cde <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8001752:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001756:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001760:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fa81 	bl	8000c6c <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800176a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800176e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8001778:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800177c:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800177e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001782:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 800178c:	2204      	movs	r2, #4
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f004 fa29 	bl	8005be8 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8001796:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800179a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800179e:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 80017a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80017ae:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80017b2:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 80017b6:	f7ff f9c7 	bl	8000b48 <WrMulti>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80017c2:	4313      	orrs	r3, r2
 80017c4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80017c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017cc:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 80017d0:	2303      	movs	r3, #3
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	23ff      	movs	r3, #255	@ 0xff
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80017dc:	2201      	movs	r2, #1
 80017de:	2104      	movs	r1, #4
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	f7ff fc6a 	bl	80010ba <_vl53l8cx_poll_for_answer>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80017ee:	4313      	orrs	r3, r2
 80017f0:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80017f4:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	08006870 	.word	0x08006870
 8001808:	08006878 	.word	0x08006878
 800180c:	0001fca0 	.word	0x0001fca0

08001810 <vl53l8cx_is_alive>:

uint8_t vl53l8cx_is_alive(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f966 	bl	8000af8 <WrByte>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	4313      	orrs	r3, r2
 8001834:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0, &device_id);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f107 020e 	add.w	r2, r7, #14
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f926 	bl	8000a90 <RdByte>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	4313      	orrs	r3, r2
 800184c:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 1, &revision_id);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f107 020d 	add.w	r2, r7, #13
 8001854:	2101      	movs	r1, #1
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f91a 	bl	8000a90 <RdByte>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	4313      	orrs	r3, r2
 8001864:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f942 	bl	8000af8 <WrByte>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	4313      	orrs	r3, r2
 800187c:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x0C))
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	2bf0      	cmp	r3, #240	@ 0xf0
 8001882:	d106      	bne.n	8001892 <vl53l8cx_is_alive+0x82>
 8001884:	7b7b      	ldrb	r3, [r7, #13]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d103      	bne.n	8001892 <vl53l8cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e002      	b.n	8001898 <vl53l8cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <vl53l8cx_init>:

uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80018b0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80018b4:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80018b6:	2301      	movs	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
	uint32_t crc_checksum = 0x00;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a80      	ldr	r2, [pc, #512]	@ (8001ac4 <vl53l8cx_init+0x220>)
 80018c2:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a80      	ldr	r2, [pc, #512]	@ (8001ac8 <vl53l8cx_init+0x224>)
 80018c8:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2aac 	strb.w	r2, [r3, #2732]	@ 0xaac

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f90c 	bl	8000af8 <WrByte>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2204      	movs	r2, #4
 80018ee:	2109      	movs	r1, #9
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff f901 	bl	8000af8 <WrByte>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2240      	movs	r2, #64	@ 0x40
 8001904:	210f      	movs	r1, #15
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f8f6 	bl	8000af8 <WrByte>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	4313      	orrs	r3, r2
 8001914:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2203      	movs	r2, #3
 800191a:	210a      	movs	r1, #10
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff f8eb 	bl	8000af8 <WrByte>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	4313      	orrs	r3, r2
 800192a:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f107 0216 	add.w	r2, r7, #22
 8001932:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f8aa 	bl	8000a90 <RdByte>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	4313      	orrs	r3, r2
 8001944:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	210c      	movs	r1, #12
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f8d3 	bl	8000af8 <WrByte>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	4313      	orrs	r3, r2
 800195a:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f240 1101 	movw	r1, #257	@ 0x101
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f8c7 	bl	8000af8 <WrByte>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	4313      	orrs	r3, r2
 8001972:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f8bb 	bl	8000af8 <WrByte>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	4313      	orrs	r3, r2
 800198a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f8af 	bl	8000af8 <WrByte>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f244 0102 	movw	r1, #16386	@ 0x4002
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f8a3 	bl	8000af8 <WrByte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f244 0102 	movw	r1, #16386	@ 0x4002
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f897 	bl	8000af8 <WrByte>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f88b 	bl	8000af8 <WrByte>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f240 1103 	movw	r1, #259	@ 0x103
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f87f 	bl	8000af8 <WrByte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	210c      	movs	r1, #12
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f874 	bl	8000af8 <WrByte>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2243      	movs	r2, #67	@ 0x43
 8001a1e:	210f      	movs	r1, #15
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f869 	bl	8000af8 <WrByte>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2101      	movs	r1, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f94f 	bl	8000cd8 <WaitMs>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2240      	movs	r2, #64	@ 0x40
 8001a48:	210f      	movs	r1, #15
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f854 	bl	8000af8 <WrByte>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	210a      	movs	r1, #10
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f849 	bl	8000af8 <WrByte>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2164      	movs	r1, #100	@ 0x64
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f92f 	bl	8000cd8 <WaitMs>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f833 	bl	8000af8 <WrByte>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	23ff      	movs	r3, #255	@ 0xff
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2306      	movs	r3, #6
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fb05 	bl	80010ba <_vl53l8cx_poll_for_answer>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 8308 	bne.w	80020d2 <vl53l8cx_init+0x82e>
 8001ac2:	e003      	b.n	8001acc <vl53l8cx_init+0x228>
 8001ac4:	0801bcb0 	.word	0x0801bcb0
 8001ac8:	0801b8e4 	.word	0x0801b8e4
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	210e      	movs	r1, #14
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f810 	bl	8000af8 <WrByte>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f804 	bl	8000af8 <WrByte>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fff8 	bl	8000af8 <WrByte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x06, 0x01);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	2106      	movs	r1, #6
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe ffed 	bl	8000af8 <WrByte>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 8001b28:	2304      	movs	r3, #4
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	23ff      	movs	r3, #255	@ 0xff
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2321      	movs	r3, #33	@ 0x21
 8001b32:	2200      	movs	r2, #0
 8001b34:	2101      	movs	r1, #1
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fabf 	bl	80010ba <_vl53l8cx_poll_for_answer>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe ffd2 	bl	8000af8 <WrByte>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f107 0216 	add.w	r2, r7, #22
 8001b64:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe ff91 	bl	8000a90 <RdByte>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	210c      	movs	r1, #12
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe ffba 	bl	8000af8 <WrByte>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe ffae 	bl	8000af8 <WrByte>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f240 1101 	movw	r1, #257	@ 0x101
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe ffa2 	bl	8000af8 <WrByte>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe ff96 	bl	8000af8 <WrByte>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe ff8a 	bl	8000af8 <WrByte>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe ff7e 	bl	8000af8 <WrByte>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe ff72 	bl	8000af8 <WrByte>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2203      	movs	r2, #3
 8001c22:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe ff66 	bl	8000af8 <WrByte>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f240 1103 	movw	r1, #259	@ 0x103
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe ff5a 	bl	8000af8 <WrByte>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f244 010f 	movw	r1, #16399	@ 0x400f
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe ff4e 	bl	8000af8 <WrByte>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2243      	movs	r2, #67	@ 0x43
 8001c6a:	f240 211a 	movw	r1, #538	@ 0x21a
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe ff42 	bl	8000af8 <WrByte>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	f240 211a 	movw	r1, #538	@ 0x21a
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe ff36 	bl	8000af8 <WrByte>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f240 211a 	movw	r1, #538	@ 0x21a
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe ff2a 	bl	8000af8 <WrByte>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	7dfb      	ldrb	r3, [r7, #23]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f240 211a 	movw	r1, #538	@ 0x21a
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe ff1e 	bl	8000af8 <WrByte>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f240 2119 	movw	r1, #537	@ 0x219
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe ff12 	bl	8000af8 <WrByte>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f240 211b 	movw	r1, #539	@ 0x21b
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe ff06 	bl	8000af8 <WrByte>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fefa 	bl	8000af8 <WrByte>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f107 0216 	add.w	r2, r7, #22
 8001d14:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe feb9 	bl	8000a90 <RdByte>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fee1 	bl	8000af8 <WrByte>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L8CX */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2209      	movs	r2, #9
 8001d44:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fed5 	bl	8000af8 <WrByte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	461a      	mov	r2, r3
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d5e:	4ade      	ldr	r2, [pc, #888]	@ (80020d8 <vl53l8cx_init+0x834>)
 8001d60:	2100      	movs	r1, #0
 8001d62:	f7fe fef1 	bl	8000b48 <WrMulti>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	220a      	movs	r2, #10
 8001d74:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe febd 	bl	8000af8 <WrByte>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d8e:	4ad3      	ldr	r2, [pc, #844]	@ (80020dc <vl53l8cx_init+0x838>)
 8001d90:	2100      	movs	r1, #0
 8001d92:	f7fe fed9 	bl	8000b48 <WrMulti>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	220b      	movs	r2, #11
 8001da4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fea5 	bl	8000af8 <WrByte>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001dbe:	4ac8      	ldr	r2, [pc, #800]	@ (80020e0 <vl53l8cx_init+0x83c>)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	f7fe fec1 	bl	8000b48 <WrMulti>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fe8d 	bl	8000af8 <WrByte>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fe81 	bl	8000af8 <WrByte>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	2106      	movs	r1, #6
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fe76 	bl	8000af8 <WrByte>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	75fb      	strb	r3, [r7, #23]

	status |= WaitMs(&(p_dev->platform), 5);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2105      	movs	r1, #5
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe ff5c 	bl	8000cd8 <WaitMs>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fe60 	bl	8000af8 <WrByte>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f107 0216 	add.w	r2, r7, #22
 8001e48:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fe1f 	bl	8000a90 <RdByte>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	210c      	movs	r1, #12
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fe48 	bl	8000af8 <WrByte>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fe3c 	bl	8000af8 <WrByte>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fe30 	bl	8000af8 <WrByte>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f240 1115 	movw	r1, #277	@ 0x115
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fe24 	bl	8000af8 <WrByte>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2242      	movs	r2, #66	@ 0x42
 8001ebe:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fe18 	bl	8000af8 <WrByte>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f240 1117 	movw	r1, #279	@ 0x117
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fe0c 	bl	8000af8 <WrByte>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	210b      	movs	r1, #11
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fe01 	bl	8000af8 <WrByte>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461a      	mov	r2, r3
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f107 0216 	add.w	r2, r7, #22
 8001f06:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fdc0 	bl	8000a90 <RdByte>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	210c      	movs	r1, #12
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fde9 	bl	8000af8 <WrByte>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	210b      	movs	r1, #11
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fdde 	bl	8000af8 <WrByte>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff f907 	bl	800115a <_vl53l8cx_poll_for_mcu_boot>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f040 80c9 	bne.w	80020f0 <vl53l8cx_init+0x84c>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fdc6 	bl	8000af8 <WrByte>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	75fb      	strb	r3, [r7, #23]

	/* Firmware checksum */
	status |= RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8001f76:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, 4);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8001f7e:	2304      	movs	r3, #4
 8001f80:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8001f84:	f7fe fe00 	bl	8000b88 <RdMulti>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	75fb      	strb	r3, [r7, #23]
	SwapBuffer(p_dev->temp_buffer, 4);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f98:	2104      	movs	r1, #4
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fe66 	bl	8000c6c <SwapBuffer>
	memcpy((uint8_t*)&crc_checksum, &(p_dev->temp_buffer[0]), 4);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60bb      	str	r3, [r7, #8]
	if (crc_checksum != (uint32_t)0x56be6b24)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4a4d      	ldr	r2, [pc, #308]	@ (80020e4 <vl53l8cx_init+0x840>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d003      	beq.n	8001fba <vl53l8cx_init+0x716>
	{
		status |= VL53L8CX_STATUS_FW_CHECKSUM_FAIL;
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	f043 0305 	orr.w	r3, r3, #5
 8001fb8:	75fb      	strb	r3, [r7, #23]
	}

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	2328      	movs	r3, #40	@ 0x28
 8001fbe:	4a4a      	ldr	r2, [pc, #296]	@ (80020e8 <vl53l8cx_init+0x844>)
 8001fc0:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8001fc4:	f7fe fdc0 	bl	8000b48 <WrMulti>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	23ff      	movs	r3, #255	@ 0xff
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff f869 	bl	80010ba <_vl53l8cx_poll_for_answer>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8001ff2:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8001ffa:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8001ffe:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8002002:	f7fe fdc1 	bl	8000b88 <RdMulti>
 8002006:	4603      	mov	r3, r0
 8002008:	461a      	mov	r2, r3
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	4313      	orrs	r3, r2
 800200e:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f103 0010 	add.w	r0, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800201c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8002020:	4619      	mov	r1, r3
 8002022:	f003 fe5c 	bl	8005cde <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8002026:	2110      	movs	r1, #16
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff f8d9 	bl	80011e0 <_vl53l8cx_send_offset_data>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	4313      	orrs	r3, r2
 8002036:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800203e:	4a2b      	ldr	r2, [pc, #172]	@ (80020ec <vl53l8cx_init+0x848>)
 8002040:	4618      	mov	r0, r3
 8002042:	4611      	mov	r1, r2
 8002044:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8002048:	461a      	mov	r2, r3
 800204a:	f003 fe48 	bl	8005cde <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 800204e:	2110      	movs	r1, #16
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fa91 	bl	8001578 <_vl53l8cx_send_xtalk_data>
 8002056:	4603      	mov	r3, r0
 8002058:	461a      	mov	r2, r3
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	4313      	orrs	r3, r2
 800205e:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 800206a:	f642 4134 	movw	r1, #11316	@ 0x2c34
 800206e:	f7fe fd6b 	bl	8000b48 <WrMulti>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	7dfb      	ldrb	r3, [r7, #23]
 8002078:	4313      	orrs	r3, r2
 800207a:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 800207c:	2303      	movs	r3, #3
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	23ff      	movs	r3, #255	@ 0xff
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002088:	2201      	movs	r2, #1
 800208a:	2104      	movs	r1, #4
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff f814 	bl	80010ba <_vl53l8cx_poll_for_answer>
 8002092:	4603      	mov	r3, r0
 8002094:	461a      	mov	r2, r3
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	4313      	orrs	r3, r2
 800209a:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 800209c:	f107 0110 	add.w	r1, r7, #16
 80020a0:	2304      	movs	r3, #4
 80020a2:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fd3e 	bl	8002b28 <vl53l8cx_dci_write_data>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80020b6:	f107 010c 	add.w	r1, r7, #12
 80020ba:	2304      	movs	r3, #4
 80020bc:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fd31 	bl	8002b28 <vl53l8cx_dci_write_data>
 80020c6:	4603      	mov	r3, r0
 80020c8:	461a      	mov	r2, r3
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	75fb      	strb	r3, [r7, #23]
 80020d0:	e00f      	b.n	80020f2 <vl53l8cx_init+0x84e>
		goto exit;
 80020d2:	bf00      	nop
 80020d4:	e00d      	b.n	80020f2 <vl53l8cx_init+0x84e>
 80020d6:	bf00      	nop
 80020d8:	080068e4 	.word	0x080068e4
 80020dc:	0800e8e4 	.word	0x0800e8e4
 80020e0:	080168e4 	.word	0x080168e4
 80020e4:	56be6b24 	.word	0x56be6b24
 80020e8:	0801bfb8 	.word	0x0801bfb8
 80020ec:	0801bcb0 	.word	0x0801bcb0
		goto exit;
 80020f0:	bf00      	nop
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <vl53l8cx_start_ranging>:
	return status;
}

uint8_t vl53l8cx_start_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b09c      	sub	sp, #112	@ 0x70
 8002100:	af02      	add	r7, sp, #8
 8002102:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L8CX_STATUS_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 800210a:	2300      	movs	r3, #0
 800210c:	653b      	str	r3, [r7, #80]	@ 0x50
 800210e:	2300      	movs	r3, #0
 8002110:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8002112:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002116:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l8cx_get_resolution(p_dev, &resolution);
 8002118:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 800211c:	4619      	mov	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fbda 	bl	80028d8 <vl53l8cx_get_resolution>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800212c:	4313      	orrs	r3, r2
 800212e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	22ff      	movs	r2, #255	@ 0xff
 800213c:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800213e:	4bb8      	ldr	r3, [pc, #736]	@ (8002420 <vl53l8cx_start_ranging+0x324>)
 8002140:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002144:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002146:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L8CX_START_BH,
 800214a:	4bb6      	ldr	r3, [pc, #728]	@ (8002424 <vl53l8cx_start_ranging+0x328>)
 800214c:	f107 040c 	add.w	r4, r7, #12
 8002150:	461d      	mov	r5, r3
 8002152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800215a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800215e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L8CX_TARGET_STATUS_BH,
		VL53L8CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8002162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002164:	3308      	adds	r3, #8
 8002166:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8002168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800216a:	3310      	adds	r3, #16
 800216c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 800216e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002170:	3320      	adds	r3, #32
 8002172:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8002174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002176:	3340      	adds	r3, #64	@ 0x40
 8002178:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 800217a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217c:	3380      	adds	r3, #128	@ 0x80
 800217e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8002180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002182:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002186:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8002188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800218a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800218e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8002190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002192:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002196:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8002198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800219a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800219e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80021a4:	e073      	b.n	800228e <vl53l8cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 80021a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	3368      	adds	r3, #104	@ 0x68
 80021ac:	443b      	add	r3, r7
 80021ae:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d067      	beq.n	8002286 <vl53l8cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 80021b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	3368      	adds	r3, #104	@ 0x68
 80021be:	443b      	add	r3, r7
 80021c0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80021c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d057      	beq.n	8002286 <vl53l8cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80021d6:	f107 020c 	add.w	r2, r7, #12
 80021da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80021e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d03a      	beq.n	8002266 <vl53l8cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 80021f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d833      	bhi.n	8002266 <vl53l8cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 80021fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002200:	885b      	ldrh	r3, [r3, #2]
 8002202:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8002206:	4293      	cmp	r3, r2
 8002208:	d910      	bls.n	800222c <vl53l8cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 800220a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800220c:	885b      	ldrh	r3, [r3, #2]
 800220e:	f645 028f 	movw	r2, #22671	@ 0x588f
 8002212:	4293      	cmp	r3, r2
 8002214:	d80a      	bhi.n	800222c <vl53l8cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8002216:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800221a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221e:	b299      	uxth	r1, r3
 8002220:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002222:	8813      	ldrh	r3, [r2, #0]
 8002224:	f361 130f 	bfi	r3, r1, #4, #12
 8002228:	8013      	strh	r3, [r2, #0]
 800222a:	e009      	b.n	8002240 <vl53l8cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 800222c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	b299      	uxth	r1, r3
 8002236:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002238:	8813      	ldrh	r3, [r2, #0]
 800223a:	f361 130f 	bfi	r3, r1, #4, #12
 800223e:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L8CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002246:	7812      	ldrb	r2, [r2, #0]
 8002248:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	4611      	mov	r1, r2
 8002250:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002252:	8812      	ldrh	r2, [r2, #0]
 8002254:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002258:	b292      	uxth	r2, r2
 800225a:	fb01 f202 	mul.w	r2, r1, r2
 800225e:	441a      	add	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	e009      	b.n	800227a <vl53l8cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002272:	b292      	uxth	r2, r2
 8002274:	441a      	add	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	1d1a      	adds	r2, r3, #4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	e000      	b.n	8002288 <vl53l8cx_start_ranging+0x18c>
			continue;
 8002286:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002288:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800228a:	3301      	adds	r3, #1
 800228c:	663b      	str	r3, [r7, #96]	@ 0x60
 800228e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002290:	2b0b      	cmp	r3, #11
 8002292:	d988      	bls.n	80021a6 <vl53l8cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f103 0218 	add.w	r2, r3, #24
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	605a      	str	r2, [r3, #4]

	status |= vl53l8cx_dci_write_data(p_dev,
 80022a0:	f107 010c 	add.w	r1, r7, #12
 80022a4:	2330      	movs	r3, #48	@ 0x30
 80022a6:	f64d 1280 	movw	r2, #55680	@ 0xd980
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fc3c 	bl	8002b28 <vl53l8cx_dci_write_data>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461a      	mov	r2, r3
 80022b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L8CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 80022c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022c6:	3301      	adds	r3, #1
 80022c8:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l8cx_dci_write_data(p_dev,
 80022ca:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80022ce:	2308      	movs	r3, #8
 80022d0:	f64d 1268 	movw	r2, #55656	@ 0xd968
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fc27 	bl	8002b28 <vl53l8cx_dci_write_data>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L8CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l8cx_dci_write_data(p_dev,
 80022e8:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80022ec:	2310      	movs	r3, #16
 80022ee:	f64d 1270 	movw	r2, #55664	@ 0xd970
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fc18 	bl	8002b28 <vl53l8cx_dci_write_data>
 80022f8:	4603      	mov	r3, r0
 80022fa:	461a      	mov	r2, r3
 80022fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002300:	4313      	orrs	r3, r2
 8002302:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L8CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fbf2 	bl	8000af8 <WrByte>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800231c:	4313      	orrs	r3, r2
 800231e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2205      	movs	r2, #5
 8002326:	2109      	movs	r1, #9
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fbe5 	bl	8000af8 <WrByte>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002336:	4313      	orrs	r3, r2
 8002338:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fbd7 	bl	8000af8 <WrByte>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002352:	4313      	orrs	r3, r2
 8002354:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L8CX_UI_CMD_END -
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800235e:	2304      	movs	r3, #4
 8002360:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002364:	f7fe fbf0 	bl	8000b48 <WrMulti>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002370:	4313      	orrs	r3, r2
 8002372:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8002376:	2303      	movs	r3, #3
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	23ff      	movs	r3, #255	@ 0xff
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002382:	2201      	movs	r2, #1
 8002384:	2104      	movs	r1, #4
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe fe97 	bl	80010ba <_vl53l8cx_poll_for_answer>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002394:	4313      	orrs	r3, r2
 8002396:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
	status |= vl53l8cx_dci_read_data(p_dev,
 80023a0:	230c      	movs	r3, #12
 80023a2:	f245 4240 	movw	r2, #21568	@ 0x5440
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fb34 	bl	8002a14 <vl53l8cx_dci_read_data>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 80023c8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80023cc:	461a      	mov	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d002      	beq.n	80023dc <vl53l8cx_start_ranging+0x2e0>
	{
		status |= VL53L8CX_STATUS_ERROR;
 80023d6:	23ff      	movs	r3, #255	@ 0xff
 80023d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	/* Ensure that there is no laser safety fault */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0xE0C4, 8);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
	status |= vl53l8cx_dci_read_data(p_dev,
 80023e2:	2308      	movs	r3, #8
 80023e4:	f24e 02c4 	movw	r2, #57540	@ 0xe0c4
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fb13 	bl	8002a14 <vl53l8cx_dci_read_data>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if((uint8_t)p_dev->temp_buffer[0x6] != (uint8_t)0)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3506 	ldrb.w	r3, [r3, #1286]	@ 0x506
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <vl53l8cx_start_ranging+0x316>
	{
		status |= VL53L8CX_STATUS_LASER_SAFETY;
 8002406:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800240a:	f043 0303 	orr.w	r3, r3, #3
 800240e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8002412:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002416:	4618      	mov	r0, r3
 8002418:	3768      	adds	r7, #104	@ 0x68
 800241a:	46bd      	mov	sp, r7
 800241c:	bdb0      	pop	{r4, r5, r7, pc}
 800241e:	bf00      	nop
 8002420:	08006880 	.word	0x08006880
 8002424:	08006890 	.word	0x08006890

08002428 <vl53l8cx_check_data_ready>:
}

uint8_t vl53l8cx_check_data_ready(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 800243e:	2304      	movs	r3, #4
 8002440:	2100      	movs	r1, #0
 8002442:	f7fe fba1 	bl	8000b88 <RdMulti>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	4313      	orrs	r3, r2
 800244e:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	789b      	ldrb	r3, [r3, #2]
 800245a:	429a      	cmp	r2, r3
 800245c:	d020      	beq.n	80024a0 <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8002464:	2bff      	cmp	r3, #255	@ 0xff
 8002466:	d01b      	beq.n	80024a0 <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 800246e:	2b05      	cmp	r3, #5
 8002470:	d116      	bne.n	80024a0 <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8002478:	f003 0305 	and.w	r3, r3, #5
 800247c:	2b05      	cmp	r3, #5
 800247e:	d10f      	bne.n	80024a0 <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <vl53l8cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	709a      	strb	r2, [r3, #2]
 800249e:	e00e      	b.n	80024be <vl53l8cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	da05      	bge.n	80024b8 <vl53l8cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 2502 	ldrb.w	r2, [r3, #1282]	@ 0x502
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <vl53l8cx_get_ranging_data>:

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 80024d6:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= RdMulti(&(p_dev->platform), 0x0,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2100      	movs	r1, #0
 80024e4:	f7fe fb50 	bl	8000b88 <RdMulti>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	7ffb      	ldrb	r3, [r7, #31]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	709a      	strb	r2, [r3, #2]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f7fe fbae 	bl	8000c6c <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8002510:	2310      	movs	r3, #16
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	e10e      	b.n	8002734 <vl53l8cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d915      	bls.n	800255c <vl53l8cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d80e      	bhi.n	800255c <vl53l8cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002552:	b29b      	uxth	r3, r3
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	e005      	b.n	8002568 <vl53l8cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002564:	b29b      	uxth	r3, r3
 8002566:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	885b      	ldrh	r3, [r3, #2]
 800256c:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8002570:	4293      	cmp	r3, r2
 8002572:	f000 80bb 	beq.w	80026ec <vl53l8cx_get_ranging_data+0x224>
 8002576:	f24e 0284 	movw	r2, #57476	@ 0xe084
 800257a:	4293      	cmp	r3, r2
 800257c:	f300 80d2 	bgt.w	8002724 <vl53l8cx_get_ranging_data+0x25c>
 8002580:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8002584:	4293      	cmp	r3, r2
 8002586:	f000 80a3 	beq.w	80026d0 <vl53l8cx_get_ranging_data+0x208>
 800258a:	f24e 0244 	movw	r2, #57412	@ 0xe044
 800258e:	4293      	cmp	r3, r2
 8002590:	f300 80c8 	bgt.w	8002724 <vl53l8cx_get_ranging_data+0x25c>
 8002594:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8002598:	4293      	cmp	r3, r2
 800259a:	f000 808b 	beq.w	80026b4 <vl53l8cx_get_ranging_data+0x1ec>
 800259e:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 80025a2:	4293      	cmp	r3, r2
 80025a4:	f300 80be 	bgt.w	8002724 <vl53l8cx_get_ranging_data+0x25c>
 80025a8:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d073      	beq.n	8002698 <vl53l8cx_get_ranging_data+0x1d0>
 80025b0:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 80025b4:	4293      	cmp	r3, r2
 80025b6:	f300 80b5 	bgt.w	8002724 <vl53l8cx_get_ranging_data+0x25c>
 80025ba:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 80025be:	4293      	cmp	r3, r2
 80025c0:	d05c      	beq.n	800267c <vl53l8cx_get_ranging_data+0x1b4>
 80025c2:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 80025c6:	4293      	cmp	r3, r2
 80025c8:	f300 80ac 	bgt.w	8002724 <vl53l8cx_get_ranging_data+0x25c>
 80025cc:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d045      	beq.n	8002660 <vl53l8cx_get_ranging_data+0x198>
 80025d4:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 80025d8:	4293      	cmp	r3, r2
 80025da:	f300 80a3 	bgt.w	8002724 <vl53l8cx_get_ranging_data+0x25c>
 80025de:	f64d 0258 	movw	r2, #55384	@ 0xd858
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f000 8090 	beq.w	8002708 <vl53l8cx_get_ranging_data+0x240>
 80025e8:	f64d 0258 	movw	r2, #55384	@ 0xd858
 80025ec:	4293      	cmp	r3, r2
 80025ee:	f300 8099 	bgt.w	8002724 <vl53l8cx_get_ranging_data+0x25c>
 80025f2:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d024      	beq.n	8002644 <vl53l8cx_get_ranging_data+0x17c>
 80025fa:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80025fe:	4293      	cmp	r3, r2
 8002600:	f300 8090 	bgt.w	8002724 <vl53l8cx_get_ranging_data+0x25c>
 8002604:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <vl53l8cx_get_ranging_data+0x14e>
 800260c:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8002610:	4293      	cmp	r3, r2
 8002612:	d00a      	beq.n	800262a <vl53l8cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8002614:	e086      	b.n	8002724 <vl53l8cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	330c      	adds	r3, #12
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8002622:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	701a      	strb	r2, [r3, #0]
				break;
 8002628:	e07d      	b.n	8002726 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	3304      	adds	r3, #4
 8002632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4619      	mov	r1, r3
 800263e:	f003 fb4e 	bl	8005cde <memcpy>
				break;
 8002642:	e070      	b.n	8002726 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	3304      	adds	r3, #4
 800264e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4619      	mov	r1, r3
 800265a:	f003 fb40 	bl	8005cde <memcpy>
				break;
 800265e:	e062      	b.n	8002726 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	3304      	adds	r3, #4
 800266a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4619      	mov	r1, r3
 8002676:	f003 fb32 	bl	8005cde <memcpy>
				break;
 800267a:	e054      	b.n	8002726 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	3304      	adds	r3, #4
 8002686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4619      	mov	r1, r3
 8002692:	f003 fb24 	bl	8005cde <memcpy>
				break;
 8002696:	e046      	b.n	8002726 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	3304      	adds	r3, #4
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4619      	mov	r1, r3
 80026ae:	f003 fb16 	bl	8005cde <memcpy>
				break;
 80026b2:	e038      	b.n	8002726 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	3304      	adds	r3, #4
 80026be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4619      	mov	r1, r3
 80026ca:	f003 fb08 	bl	8005cde <memcpy>
				break;
 80026ce:	e02a      	b.n	8002726 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	3304      	adds	r3, #4
 80026da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4619      	mov	r1, r3
 80026e6:	f003 fafa 	bl	8005cde <memcpy>
				break;
 80026ea:	e01c      	b.n	8002726 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3304      	adds	r3, #4
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4619      	mov	r1, r3
 8002702:	f003 faec 	bl	8005cde <memcpy>
				break;
 8002706:	e00e      	b.n	8002726 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	3304      	adds	r3, #4
 8002712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4619      	mov	r1, r3
 800271e:	f003 fade 	bl	8005cde <memcpy>
				break;
 8002722:	e000      	b.n	8002726 <vl53l8cx_get_ranging_data+0x25e>
				break;
 8002724:	bf00      	nop
		}
		i += msize;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	3304      	adds	r3, #4
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	429a      	cmp	r2, r3
 800273c:	f4ff aeeb 	bcc.w	8002516 <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e00d      	b.n	8002762 <vl53l8cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0ada      	lsrs	r2, r3, #11
 8002752:	6839      	ldr	r1, [r7, #0]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	3301      	adds	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b3f      	cmp	r3, #63	@ 0x3f
 8002766:	d9ee      	bls.n	8002746 <vl53l8cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	e044      	b.n	80027f8 <vl53l8cx_get_ranging_data+0x330>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da00      	bge.n	8002784 <vl53l8cx_get_ranging_data+0x2bc>
 8002782:	3303      	adds	r3, #3
 8002784:	109b      	asrs	r3, r3, #2
 8002786:	b219      	sxth	r1, r3
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	460a      	mov	r2, r1
 8002796:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4413      	add	r3, r2
 800279e:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	b2d9      	uxtb	r1, r3
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	4413      	add	r3, r2
 80027ae:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 80027b2:	460a      	mov	r2, r1
 80027b4:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	889b      	ldrh	r3, [r3, #4]
 80027c4:	09db      	lsrs	r3, r3, #7
 80027c6:	b299      	uxth	r1, r3
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	460a      	mov	r2, r1
 80027d6:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3390      	adds	r3, #144	@ 0x90
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0ada      	lsrs	r2, r3, #11
 80027e6:	6839      	ldr	r1, [r7, #0]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	3390      	adds	r3, #144	@ 0x90
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80027fc:	d9b7      	bls.n	800276e <vl53l8cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e01b      	b.n	800283c <vl53l8cx_get_ranging_data+0x374>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4413      	add	r3, r2
 800280a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d110      	bne.n	8002836 <vl53l8cx_get_ranging_data+0x36e>
			for(j = 0; j < (uint32_t)
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	e00a      	b.n	8002830 <vl53l8cx_get_ranging_data+0x368>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	4413      	add	r3, r2
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4413      	add	r3, r2
 8002824:	22ff      	movs	r2, #255	@ 0xff
 8002826:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3301      	adds	r3, #1
 800282e:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f1      	beq.n	800281a <vl53l8cx_get_ranging_data+0x352>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3301      	adds	r3, #1
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002840:	d9e0      	bls.n	8002804 <vl53l8cx_get_ranging_data+0x33c>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e014      	b.n	8002872 <vl53l8cx_get_ranging_data+0x3aa>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	4a1f      	ldr	r2, [pc, #124]	@ (80028d4 <vl53l8cx_get_ranging_data+0x40c>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	0bda      	lsrs	r2, r3, #15
 800285e:	6839      	ldr	r1, [r7, #0]
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	3301      	adds	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b1f      	cmp	r3, #31
 8002876:	d9e7      	bls.n	8002848 <vl53l8cx_get_ranging_data+0x380>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 8002888:	461a      	mov	r2, r3
 800288a:	89fb      	ldrh	r3, [r7, #14]
 800288c:	4313      	orrs	r3, r2
 800288e:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8002894:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 80028a6:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80028b0:	461a      	mov	r2, r3
 80028b2:	89bb      	ldrh	r3, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 80028b8:	89fa      	ldrh	r2, [r7, #14]
 80028ba:	89bb      	ldrh	r3, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d003      	beq.n	80028c8 <vl53l8cx_get_ranging_data+0x400>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 80028c0:	7ffb      	ldrb	r3, [r7, #31]
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80028c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	80008001 	.word	0x80008001

080028d8 <vl53l8cx_get_resolution>:

uint8_t vl53l8cx_get_resolution(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80028ec:	2308      	movs	r3, #8
 80028ee:	f245 4250 	movw	r2, #21584	@ 0x5450
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f88e 	bl	8002a14 <vl53l8cx_dci_read_data>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	4313      	orrs	r3, r2
 8002900:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 800290e:	fb12 f303 	smulbb	r3, r2, r3
 8002912:	b2da      	uxtb	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	701a      	strb	r2, [r3, #0]

	return status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <vl53l8cx_set_ranging_frequency_hz>:
}

uint8_t vl53l8cx_set_ranging_frequency_hz(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b088      	sub	sp, #32
 8002926:	af04      	add	r7, sp, #16
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8002938:	2301      	movs	r3, #1
 800293a:	9302      	str	r3, [sp, #8]
 800293c:	2301      	movs	r3, #1
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	1cfb      	adds	r3, r7, #3
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2304      	movs	r3, #4
 8002946:	f245 4258 	movw	r2, #21592	@ 0x5458
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f98a 	bl	8002c64 <vl53l8cx_dci_replace_data>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	4313      	orrs	r3, r2
 8002958:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <vl53l8cx_set_ranging_mode>:
}

uint8_t vl53l8cx_set_ranging_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 800297e:	2308      	movs	r3, #8
 8002980:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f845 	bl	8002a14 <vl53l8cx_dci_read_data>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	4313      	orrs	r3, r2
 8002992:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d002      	beq.n	80029a0 <vl53l8cx_set_ranging_mode+0x3c>
 800299a:	2b03      	cmp	r3, #3
 800299c:	d00b      	beq.n	80029b6 <vl53l8cx_set_ranging_mode+0x52>
 800299e:	e015      	b.n	80029cc <vl53l8cx_set_ranging_mode+0x68>
	{
		case VL53L8CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x03] = 0x3;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2203      	movs	r2, #3
 80029ac:	f883 2503 	strb.w	r2, [r3, #1283]	@ 0x503
			single_range = 0x00;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
			break;
 80029b4:	e00d      	b.n	80029d2 <vl53l8cx_set_ranging_mode+0x6e>

		case VL53L8CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2203      	movs	r2, #3
 80029ba:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x03] = 0x2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 2503 	strb.w	r2, [r3, #1283]	@ 0x503
			single_range = 0x01;
 80029c6:	2301      	movs	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
			break;
 80029ca:	e002      	b.n	80029d2 <vl53l8cx_set_ranging_mode+0x6e>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 80029cc:	237f      	movs	r3, #127	@ 0x7f
 80029ce:	73fb      	strb	r3, [r7, #15]
			break;
 80029d0:	bf00      	nop
	}

	status |= vl53l8cx_dci_write_data(p_dev, p_dev->temp_buffer,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80029d8:	2308      	movs	r3, #8
 80029da:	f64a 5230 	movw	r2, #44336	@ 0xad30
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8a2 	bl	8002b28 <vl53l8cx_dci_write_data>
 80029e4:	4603      	mov	r3, r0
 80029e6:	461a      	mov	r2, r3
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80029ee:	f107 0108 	add.w	r1, r7, #8
 80029f2:	2304      	movs	r3, #4
 80029f4:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f895 	bl	8002b28 <vl53l8cx_dci_write_data>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <vl53l8cx_dci_read_data>:
uint8_t vl53l8cx_dci_read_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08c      	sub	sp, #48	@ 0x30
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L8CX_STATUS_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8002a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b24 <vl53l8cx_dci_read_data+0x110>)
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8002a40:	d903      	bls.n	8002a4a <vl53l8cx_dci_read_data+0x36>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8002a42:	23ff      	movs	r3, #255	@ 0xff
 8002a44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002a48:	e065      	b.n	8002b16 <vl53l8cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8002a58:	887b      	ldrh	r3, [r7, #2]
 8002a5a:	111b      	asrs	r3, r3, #4
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f107 0214 	add.w	r2, r7, #20
 8002a70:	230c      	movs	r3, #12
 8002a72:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8002a76:	f7fe f867 	bl	8000b48 <WrMulti>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L8CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8002a88:	2303      	movs	r3, #3
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	23ff      	movs	r3, #255	@ 0xff
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002a94:	2201      	movs	r2, #1
 8002a96:	2104      	movs	r1, #4
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7fe fb0e 	bl	80010ba <_vl53l8cx_poll_for_answer>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L8CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8002aac:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8002aba:	f7fe f865 	bl	8000b88 <RdMulti>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f7fe f8c6 	bl	8000c6c <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002ae4:	e011      	b.n	8002b0a <vl53l8cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8002ae6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002aea:	1d1a      	adds	r2, r3, #4
 8002aec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	440b      	add	r3, r1
 8002af4:	68f9      	ldr	r1, [r7, #12]
 8002af6:	440a      	add	r2, r1
 8002af8:	f892 2500 	ldrb.w	r2, [r2, #1280]	@ 0x500
 8002afc:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002afe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b0e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8002b12:	429a      	cmp	r2, r3
 8002b14:	dbe7      	blt.n	8002ae6 <vl53l8cx_dci_read_data+0xd2>
		}
	}

	return status;
 8002b16:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3728      	adds	r7, #40	@ 0x28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	080068c0 	.word	0x080068c0

08002b28 <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	@ 0x30
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002b40:	2300      	movs	r3, #0
 8002b42:	753b      	strb	r3, [r7, #20]
 8002b44:	2300      	movs	r3, #0
 8002b46:	757b      	strb	r3, [r7, #21]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	75bb      	strb	r3, [r7, #22]
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	75fb      	strb	r3, [r7, #23]
 8002b50:	2305      	movs	r3, #5
 8002b52:	763b      	strb	r3, [r7, #24]
 8002b54:	2301      	movs	r3, #1
 8002b56:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	121b      	asrs	r3, r3, #8
 8002b5e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002b60:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	3308      	adds	r3, #8
 8002b68:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002b6a:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 8002b6c:	887b      	ldrh	r3, [r7, #2]
 8002b6e:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8002b72:	3334      	adds	r3, #52	@ 0x34
 8002b74:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8002b7c:	d903      	bls.n	8002b86 <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 8002b7e:	23ff      	movs	r3, #255	@ 0xff
 8002b80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002b84:	e068      	b.n	8002c58 <vl53l8cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	111b      	asrs	r3, r3, #4
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	68b8      	ldr	r0, [r7, #8]
 8002bac:	f7fe f85e 	bl	8000c6c <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002bb8:	e012      	b.n	8002be0 <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8002bba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	441a      	add	r2, r3
 8002bc2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	7811      	ldrb	r1, [r2, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	460a      	mov	r2, r1
 8002bd0:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002bd4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002be0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	dae8      	bge.n	8002bba <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	cb03      	ldmia	r3!, {r0, r1}
 8002c06:	6010      	str	r0, [r2, #0]
 8002c08:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8002c0a:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8002c12:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8002c14:	330c      	adds	r3, #12
 8002c16:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8002c18:	f7fd ff96 	bl	8000b48 <WrMulti>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	23ff      	movs	r3, #255	@ 0xff
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002c36:	2201      	movs	r2, #1
 8002c38:	2104      	movs	r1, #4
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7fe fa3d 	bl	80010ba <_vl53l8cx_poll_for_answer>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	4619      	mov	r1, r3
 8002c52:	68b8      	ldr	r0, [r7, #8]
 8002c54:	f7fe f80a 	bl	8000c6c <SwapBuffer>
	}

	return status;
 8002c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3728      	adds	r7, #40	@ 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <vl53l8cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]

	status |= vl53l8cx_dci_read_data(p_dev, data, index, data_size);
 8002c76:	887b      	ldrh	r3, [r7, #2]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff fec9 	bl	8002a14 <vl53l8cx_dci_read_data>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8002c8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4413      	add	r3, r2
 8002c92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c94:	6a39      	ldr	r1, [r7, #32]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 f821 	bl	8005cde <memcpy>
	status |= vl53l8cx_dci_write_data(p_dev, data, index, data_size);
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff ff40 	bl	8002b28 <vl53l8cx_dci_write_data>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	75fb      	strb	r3, [r7, #23]

	return status;
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <HAL_Init+0x40>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cfc <HAL_Init+0x40>)
 8002cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_Init+0x40>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cfc <HAL_Init+0x40>)
 8002cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd8:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <HAL_Init+0x40>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a07      	ldr	r2, [pc, #28]	@ (8002cfc <HAL_Init+0x40>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	f000 f94f 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cea:	2000      	movs	r0, #0
 8002cec:	f000 f808 	bl	8002d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf0:	f7fe f800 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023c00 	.word	0x40023c00

08002d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_InitTick+0x54>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b12      	ldr	r3, [pc, #72]	@ (8002d58 <HAL_InitTick+0x58>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f967 	bl	8002ff2 <HAL_SYSTICK_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00e      	b.n	8002d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b0f      	cmp	r3, #15
 8002d32:	d80a      	bhi.n	8002d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d34:	2200      	movs	r2, #0
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f000 f92f 	bl	8002f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d40:	4a06      	ldr	r2, [pc, #24]	@ (8002d5c <HAL_InitTick+0x5c>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000008 	.word	0x20000008
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_IncTick+0x20>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_IncTick+0x24>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <HAL_IncTick+0x24>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000008 	.word	0x20000008
 8002d84:	20001134 	.word	0x20001134

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	@ (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20001134 	.word	0x20001134

08002da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff ffee 	bl	8002d88 <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d005      	beq.n	8002dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_Delay+0x44>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc6:	bf00      	nop
 8002dc8:	f7ff ffde 	bl	8002d88 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d8f7      	bhi.n	8002dc8 <HAL_Delay+0x28>
  {
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000008 	.word	0x20000008

08002de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1a:	4a04      	ldr	r2, [pc, #16]	@ (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	60d3      	str	r3, [r2, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <__NVIC_GetPriorityGrouping+0x18>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	f003 0307 	and.w	r3, r3, #7
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	4907      	ldr	r1, [pc, #28]	@ (8002e84 <__NVIC_EnableIRQ+0x38>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	@ (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	@ (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	@ 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
         );
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	@ 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f54:	d301      	bcc.n	8002f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00f      	b.n	8002f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <SysTick_Config+0x40>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f62:	210f      	movs	r1, #15
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	f7ff ff8e 	bl	8002e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f6c:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <SysTick_Config+0x40>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f72:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <SysTick_Config+0x40>)
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff29 	bl	8002de8 <__NVIC_SetPriorityGrouping>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb0:	f7ff ff3e 	bl	8002e30 <__NVIC_GetPriorityGrouping>
 8002fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f7ff ff8e 	bl	8002edc <NVIC_EncodePriority>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff5d 	bl	8002e88 <__NVIC_SetPriority>
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff31 	bl	8002e4c <__NVIC_EnableIRQ>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ffa2 	bl	8002f44 <SysTick_Config>
 8003000:	4603      	mov	r3, r0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e159      	b.n	80032dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	f040 8148 	bne.w	80032d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d005      	beq.n	800305e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305a:	2b02      	cmp	r3, #2
 800305c:	d130      	bne.n	80030c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	2203      	movs	r2, #3
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003094:	2201      	movs	r2, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 0201 	and.w	r2, r3, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d017      	beq.n	80030fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d123      	bne.n	8003150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	08da      	lsrs	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a2 	beq.w	80032d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	4b57      	ldr	r3, [pc, #348]	@ (80032f4 <HAL_GPIO_Init+0x2e8>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	4a56      	ldr	r2, [pc, #344]	@ (80032f4 <HAL_GPIO_Init+0x2e8>)
 800319c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031a2:	4b54      	ldr	r3, [pc, #336]	@ (80032f4 <HAL_GPIO_Init+0x2e8>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ae:	4a52      	ldr	r2, [pc, #328]	@ (80032f8 <HAL_GPIO_Init+0x2ec>)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	3302      	adds	r3, #2
 80031b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a49      	ldr	r2, [pc, #292]	@ (80032fc <HAL_GPIO_Init+0x2f0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_Init+0x202>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a48      	ldr	r2, [pc, #288]	@ (8003300 <HAL_GPIO_Init+0x2f4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_Init+0x1fe>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a47      	ldr	r2, [pc, #284]	@ (8003304 <HAL_GPIO_Init+0x2f8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_GPIO_Init+0x1fa>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a46      	ldr	r2, [pc, #280]	@ (8003308 <HAL_GPIO_Init+0x2fc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x1f6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a45      	ldr	r2, [pc, #276]	@ (800330c <HAL_GPIO_Init+0x300>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_Init+0x1f2>
 80031fa:	2304      	movs	r3, #4
 80031fc:	e008      	b.n	8003210 <HAL_GPIO_Init+0x204>
 80031fe:	2307      	movs	r3, #7
 8003200:	e006      	b.n	8003210 <HAL_GPIO_Init+0x204>
 8003202:	2303      	movs	r3, #3
 8003204:	e004      	b.n	8003210 <HAL_GPIO_Init+0x204>
 8003206:	2302      	movs	r3, #2
 8003208:	e002      	b.n	8003210 <HAL_GPIO_Init+0x204>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_GPIO_Init+0x204>
 800320e:	2300      	movs	r3, #0
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	f002 0203 	and.w	r2, r2, #3
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	4093      	lsls	r3, r2
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003220:	4935      	ldr	r1, [pc, #212]	@ (80032f8 <HAL_GPIO_Init+0x2ec>)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	3302      	adds	r3, #2
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322e:	4b38      	ldr	r3, [pc, #224]	@ (8003310 <HAL_GPIO_Init+0x304>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003252:	4a2f      	ldr	r2, [pc, #188]	@ (8003310 <HAL_GPIO_Init+0x304>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003258:	4b2d      	ldr	r3, [pc, #180]	@ (8003310 <HAL_GPIO_Init+0x304>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800327c:	4a24      	ldr	r2, [pc, #144]	@ (8003310 <HAL_GPIO_Init+0x304>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003282:	4b23      	ldr	r3, [pc, #140]	@ (8003310 <HAL_GPIO_Init+0x304>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003310 <HAL_GPIO_Init+0x304>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ac:	4b18      	ldr	r3, [pc, #96]	@ (8003310 <HAL_GPIO_Init+0x304>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003310 <HAL_GPIO_Init+0x304>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3301      	adds	r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	f67f aea2 	bls.w	8003028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3724      	adds	r7, #36	@ 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40013800 	.word	0x40013800
 80032fc:	40020000 	.word	0x40020000
 8003300:	40020400 	.word	0x40020400
 8003304:	40020800 	.word	0x40020800
 8003308:	40020c00 	.word	0x40020c00
 800330c:	40021000 	.word	0x40021000
 8003310:	40013c00 	.word	0x40013c00

08003314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003324:	787b      	ldrb	r3, [r7, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003330:	e003      	b.n	800333a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	041a      	lsls	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003352:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800335e:	4a05      	ldr	r2, [pc, #20]	@ (8003374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd f914 	bl	8000594 <HAL_GPIO_EXTI_Callback>
  }
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40013c00 	.word	0x40013c00

08003378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e12b      	b.n	80035e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fcd0 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	@ 0x24
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033dc:	f001 fdc6 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 80033e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4a81      	ldr	r2, [pc, #516]	@ (80035ec <HAL_I2C_Init+0x274>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d807      	bhi.n	80033fc <HAL_I2C_Init+0x84>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a80      	ldr	r2, [pc, #512]	@ (80035f0 <HAL_I2C_Init+0x278>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	bf94      	ite	ls
 80033f4:	2301      	movls	r3, #1
 80033f6:	2300      	movhi	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e006      	b.n	800340a <HAL_I2C_Init+0x92>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a7d      	ldr	r2, [pc, #500]	@ (80035f4 <HAL_I2C_Init+0x27c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	bf94      	ite	ls
 8003404:	2301      	movls	r3, #1
 8003406:	2300      	movhi	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0e7      	b.n	80035e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a78      	ldr	r2, [pc, #480]	@ (80035f8 <HAL_I2C_Init+0x280>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	0c9b      	lsrs	r3, r3, #18
 800341c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a6a      	ldr	r2, [pc, #424]	@ (80035ec <HAL_I2C_Init+0x274>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d802      	bhi.n	800344c <HAL_I2C_Init+0xd4>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3301      	adds	r3, #1
 800344a:	e009      	b.n	8003460 <HAL_I2C_Init+0xe8>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	4a69      	ldr	r2, [pc, #420]	@ (80035fc <HAL_I2C_Init+0x284>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	3301      	adds	r3, #1
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	430b      	orrs	r3, r1
 8003466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003472:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	495c      	ldr	r1, [pc, #368]	@ (80035ec <HAL_I2C_Init+0x274>)
 800347c:	428b      	cmp	r3, r1
 800347e:	d819      	bhi.n	80034b4 <HAL_I2C_Init+0x13c>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1e59      	subs	r1, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	fbb1 f3f3 	udiv	r3, r1, r3
 800348e:	1c59      	adds	r1, r3, #1
 8003490:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003494:	400b      	ands	r3, r1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_I2C_Init+0x138>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1e59      	subs	r1, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	e051      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 80034b0:	2304      	movs	r3, #4
 80034b2:	e04f      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d111      	bne.n	80034e0 <HAL_I2C_Init+0x168>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1e58      	subs	r0, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	440b      	add	r3, r1
 80034ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ce:	3301      	adds	r3, #1
 80034d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e012      	b.n	8003506 <HAL_I2C_Init+0x18e>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1e58      	subs	r0, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	0099      	lsls	r1, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Init+0x196>
 800350a:	2301      	movs	r3, #1
 800350c:	e022      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10e      	bne.n	8003534 <HAL_I2C_Init+0x1bc>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1e58      	subs	r0, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	440b      	add	r3, r1
 8003524:	fbb0 f3f3 	udiv	r3, r0, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003532:	e00f      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1e58      	subs	r0, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	0099      	lsls	r1, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	fbb0 f3f3 	udiv	r3, r0, r3
 800354a:	3301      	adds	r3, #1
 800354c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	6809      	ldr	r1, [r1, #0]
 8003558:	4313      	orrs	r3, r2
 800355a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003582:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6911      	ldr	r1, [r2, #16]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	4311      	orrs	r1, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	430b      	orrs	r3, r1
 8003596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	000186a0 	.word	0x000186a0
 80035f0:	001e847f 	.word	0x001e847f
 80035f4:	003d08ff 	.word	0x003d08ff
 80035f8:	431bde83 	.word	0x431bde83
 80035fc:	10624dd3 	.word	0x10624dd3

08003600 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	461a      	mov	r2, r3
 800360c:	460b      	mov	r3, r1
 800360e:	817b      	strh	r3, [r7, #10]
 8003610:	4613      	mov	r3, r2
 8003612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003614:	f7ff fbb8 	bl	8002d88 <HAL_GetTick>
 8003618:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b20      	cmp	r3, #32
 8003624:	f040 80e0 	bne.w	80037e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2319      	movs	r3, #25
 800362e:	2201      	movs	r2, #1
 8003630:	4970      	ldr	r1, [pc, #448]	@ (80037f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fdf4 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
 8003640:	e0d3      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_I2C_Master_Transmit+0x50>
 800364c:	2302      	movs	r3, #2
 800364e:	e0cc      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d007      	beq.n	8003676 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2221      	movs	r2, #33	@ 0x21
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2210      	movs	r2, #16
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	893a      	ldrh	r2, [r7, #8]
 80036a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a50      	ldr	r2, [pc, #320]	@ (80037f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80036b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036b8:	8979      	ldrh	r1, [r7, #10]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	6a3a      	ldr	r2, [r7, #32]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fbc8 	bl	8003e54 <I2C_MasterRequestWrite>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e08d      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036e4:	e066      	b.n	80037b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	6a39      	ldr	r1, [r7, #32]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 feb2 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d107      	bne.n	800370e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06b      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b04      	cmp	r3, #4
 800374e:	d11b      	bne.n	8003788 <HAL_I2C_Master_Transmit+0x188>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003754:	2b00      	cmp	r3, #0
 8003756:	d017      	beq.n	8003788 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	6a39      	ldr	r1, [r7, #32]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fea9 	bl	80044e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	2b04      	cmp	r3, #4
 800379e:	d107      	bne.n	80037b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e01a      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d194      	bne.n	80036e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	00100002 	.word	0x00100002
 80037f8:	ffff0000 	.word	0xffff0000

080037fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08c      	sub	sp, #48	@ 0x30
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	461a      	mov	r2, r3
 8003808:	460b      	mov	r3, r1
 800380a:	817b      	strh	r3, [r7, #10]
 800380c:	4613      	mov	r3, r2
 800380e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003810:	f7ff faba 	bl	8002d88 <HAL_GetTick>
 8003814:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b20      	cmp	r3, #32
 8003820:	f040 8217 	bne.w	8003c52 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2319      	movs	r3, #25
 800382a:	2201      	movs	r2, #1
 800382c:	497c      	ldr	r1, [pc, #496]	@ (8003a20 <HAL_I2C_Master_Receive+0x224>)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fcf6 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
 800383c:	e20a      	b.n	8003c54 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_I2C_Master_Receive+0x50>
 8003848:	2302      	movs	r3, #2
 800384a:	e203      	b.n	8003c54 <HAL_I2C_Master_Receive+0x458>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d007      	beq.n	8003872 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2222      	movs	r2, #34	@ 0x22
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2210      	movs	r2, #16
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	893a      	ldrh	r2, [r7, #8]
 80038a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003a24 <HAL_I2C_Master_Receive+0x228>)
 80038b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038b4:	8979      	ldrh	r1, [r7, #10]
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fb4c 	bl	8003f58 <I2C_MasterRequestRead>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e1c4      	b.n	8003c54 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d113      	bne.n	80038fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d2:	2300      	movs	r3, #0
 80038d4:	623b      	str	r3, [r7, #32]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	623b      	str	r3, [r7, #32]
 80038e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e198      	b.n	8003c2c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d11b      	bne.n	800393a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e178      	b.n	8003c2c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393e:	2b02      	cmp	r3, #2
 8003940:	d11b      	bne.n	800397a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003950:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	e158      	b.n	8003c2c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039a0:	e144      	b.n	8003c2c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	f200 80f1 	bhi.w	8003b8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d123      	bne.n	80039fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 fddb 	bl	8004574 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e145      	b.n	8003c54 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039fa:	e117      	b.n	8003c2c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d14e      	bne.n	8003aa2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	4906      	ldr	r1, [pc, #24]	@ (8003a28 <HAL_I2C_Master_Receive+0x22c>)
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fc06 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e11a      	b.n	8003c54 <HAL_I2C_Master_Receive+0x458>
 8003a1e:	bf00      	nop
 8003a20:	00100002 	.word	0x00100002
 8003a24:	ffff0000 	.word	0xffff0000
 8003a28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aa0:	e0c4      	b.n	8003c2c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	496c      	ldr	r1, [pc, #432]	@ (8003c5c <HAL_I2C_Master_Receive+0x460>)
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fbb7 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0cb      	b.n	8003c54 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	2200      	movs	r2, #0
 8003b06:	4955      	ldr	r1, [pc, #340]	@ (8003c5c <HAL_I2C_Master_Receive+0x460>)
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fb89 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e09d      	b.n	8003c54 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b8c:	e04e      	b.n	8003c2c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fcee 	bl	8004574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e058      	b.n	8003c54 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d124      	bne.n	8003c2c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d107      	bne.n	8003bfa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f47f aeb6 	bne.w	80039a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e000      	b.n	8003c54 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c52:	2302      	movs	r3, #2
  }
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3728      	adds	r7, #40	@ 0x28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	00010004 	.word	0x00010004

08003c60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	817b      	strh	r3, [r7, #10]
 8003c72:	460b      	mov	r3, r1
 8003c74:	813b      	strh	r3, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c7a:	f7ff f885 	bl	8002d88 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	f040 80d9 	bne.w	8003e40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2319      	movs	r3, #25
 8003c94:	2201      	movs	r2, #1
 8003c96:	496d      	ldr	r1, [pc, #436]	@ (8003e4c <HAL_I2C_Mem_Write+0x1ec>)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fac1 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0cc      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2C_Mem_Write+0x56>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0c5      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d007      	beq.n	8003cdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2221      	movs	r2, #33	@ 0x21
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2240      	movs	r2, #64	@ 0x40
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a4d      	ldr	r2, [pc, #308]	@ (8003e50 <HAL_I2C_Mem_Write+0x1f0>)
 8003d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d1e:	88f8      	ldrh	r0, [r7, #6]
 8003d20:	893a      	ldrh	r2, [r7, #8]
 8003d22:	8979      	ldrh	r1, [r7, #10]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f9e0 	bl	80040f4 <I2C_RequestMemoryWrite>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d052      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e081      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fb86 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d107      	bne.n	8003d66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06b      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d11b      	bne.n	8003de0 <HAL_I2C_Mem_Write+0x180>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d017      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1aa      	bne.n	8003d3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fb79 	bl	80044e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d107      	bne.n	8003e10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e016      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	00100002 	.word	0x00100002
 8003e50:	ffff0000 	.word	0xffff0000

08003e54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	460b      	mov	r3, r1
 8003e62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d006      	beq.n	8003e7e <I2C_MasterRequestWrite+0x2a>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d003      	beq.n	8003e7e <I2C_MasterRequestWrite+0x2a>
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e7c:	d108      	bne.n	8003e90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e00b      	b.n	8003ea8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e94:	2b12      	cmp	r3, #18
 8003e96:	d107      	bne.n	8003ea8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f9b3 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ece:	d103      	bne.n	8003ed8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e035      	b.n	8003f48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ee4:	d108      	bne.n	8003ef8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee6:	897b      	ldrh	r3, [r7, #10]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ef4:	611a      	str	r2, [r3, #16]
 8003ef6:	e01b      	b.n	8003f30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ef8:	897b      	ldrh	r3, [r7, #10]
 8003efa:	11db      	asrs	r3, r3, #7
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0306 	and.w	r3, r3, #6
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f063 030f 	orn	r3, r3, #15
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	490e      	ldr	r1, [pc, #56]	@ (8003f50 <I2C_MasterRequestWrite+0xfc>)
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f9fc 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e010      	b.n	8003f48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f26:	897b      	ldrh	r3, [r7, #10]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4907      	ldr	r1, [pc, #28]	@ (8003f54 <I2C_MasterRequestWrite+0x100>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f9ec 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	00010008 	.word	0x00010008
 8003f54:	00010002 	.word	0x00010002

08003f58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	460b      	mov	r3, r1
 8003f66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d006      	beq.n	8003f92 <I2C_MasterRequestRead+0x3a>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d003      	beq.n	8003f92 <I2C_MasterRequestRead+0x3a>
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f90:	d108      	bne.n	8003fa4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e00b      	b.n	8003fbc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa8:	2b11      	cmp	r3, #17
 8003faa:	d107      	bne.n	8003fbc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f929 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00d      	beq.n	8003ff0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fe2:	d103      	bne.n	8003fec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e079      	b.n	80040e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ff8:	d108      	bne.n	800400c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ffa:	897b      	ldrh	r3, [r7, #10]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e05f      	b.n	80040cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800400c:	897b      	ldrh	r3, [r7, #10]
 800400e:	11db      	asrs	r3, r3, #7
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 0306 	and.w	r3, r3, #6
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f063 030f 	orn	r3, r3, #15
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4930      	ldr	r1, [pc, #192]	@ (80040ec <I2C_MasterRequestRead+0x194>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f972 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e054      	b.n	80040e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800403a:	897b      	ldrh	r3, [r7, #10]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4929      	ldr	r1, [pc, #164]	@ (80040f0 <I2C_MasterRequestRead+0x198>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f962 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e044      	b.n	80040e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800407e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f8c7 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a6:	d103      	bne.n	80040b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e017      	b.n	80040e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040b4:	897b      	ldrh	r3, [r7, #10]
 80040b6:	11db      	asrs	r3, r3, #7
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f003 0306 	and.w	r3, r3, #6
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f063 030e 	orn	r3, r3, #14
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4907      	ldr	r1, [pc, #28]	@ (80040f0 <I2C_MasterRequestRead+0x198>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f91e 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	00010008 	.word	0x00010008
 80040f0:	00010002 	.word	0x00010002

080040f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	817b      	strh	r3, [r7, #10]
 8004106:	460b      	mov	r3, r1
 8004108:	813b      	strh	r3, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800411c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	2200      	movs	r2, #0
 8004126:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f878 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004144:	d103      	bne.n	800414e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800414c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e05f      	b.n	8004212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004152:	897b      	ldrh	r3, [r7, #10]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	6a3a      	ldr	r2, [r7, #32]
 8004166:	492d      	ldr	r1, [pc, #180]	@ (800421c <I2C_RequestMemoryWrite+0x128>)
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f8d3 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e04c      	b.n	8004212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800418e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004190:	6a39      	ldr	r1, [r7, #32]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f95e 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00d      	beq.n	80041ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d107      	bne.n	80041b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e02b      	b.n	8004212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041c0:	893b      	ldrh	r3, [r7, #8]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	611a      	str	r2, [r3, #16]
 80041ca:	e021      	b.n	8004210 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041cc:	893b      	ldrh	r3, [r7, #8]
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041dc:	6a39      	ldr	r1, [r7, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f938 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d107      	bne.n	8004202 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e005      	b.n	8004212 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004206:	893b      	ldrh	r3, [r7, #8]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	00010002 	.word	0x00010002

08004220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004230:	e048      	b.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d044      	beq.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fe fda5 	bl	8002d88 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d139      	bne.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10d      	bne.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x56>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	43da      	mvns	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	e00c      	b.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	43da      	mvns	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4013      	ands	r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	429a      	cmp	r2, r3
 8004294:	d116      	bne.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f043 0220 	orr.w	r2, r3, #32
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e023      	b.n	800430c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10d      	bne.n	80042ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	e00c      	b.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	43da      	mvns	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	429a      	cmp	r2, r3
 8004308:	d093      	beq.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004322:	e071      	b.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004332:	d123      	bne.n	800437c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004342:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800434c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	f043 0204 	orr.w	r2, r3, #4
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e067      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d041      	beq.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004384:	f7fe fd00 	bl	8002d88 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d136      	bne.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10c      	bne.n	80043be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bf14      	ite	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	2300      	moveq	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e00b      	b.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	43da      	mvns	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e021      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10c      	bne.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e00b      	b.n	8004444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4013      	ands	r3, r2
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	f47f af6d 	bne.w	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004460:	e034      	b.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f8e3 	bl	800462e <I2C_IsAcknowledgeFailed>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e034      	b.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d028      	beq.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fe fc85 	bl	8002d88 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11d      	bne.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449a:	2b80      	cmp	r3, #128	@ 0x80
 800449c:	d016      	beq.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e007      	b.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d1c3      	bne.n	8004462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f0:	e034      	b.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f89b 	bl	800462e <I2C_IsAcknowledgeFailed>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e034      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d028      	beq.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fe fc3d 	bl	8002d88 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d11d      	bne.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d016      	beq.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e007      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b04      	cmp	r3, #4
 8004568:	d1c3      	bne.n	80044f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004580:	e049      	b.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b10      	cmp	r3, #16
 800458e:	d119      	bne.n	80045c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0210 	mvn.w	r2, #16
 8004598:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e030      	b.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c4:	f7fe fbe0 	bl	8002d88 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d302      	bcc.n	80045da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d11d      	bne.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e4:	2b40      	cmp	r3, #64	@ 0x40
 80045e6:	d016      	beq.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e007      	b.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004620:	2b40      	cmp	r3, #64	@ 0x40
 8004622:	d1ae      	bne.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004644:	d11b      	bne.n	800467e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800464e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f043 0204 	orr.w	r2, r3, #4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e267      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d075      	beq.n	8004796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046aa:	4b88      	ldr	r3, [pc, #544]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d00c      	beq.n	80046d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046b6:	4b85      	ldr	r3, [pc, #532]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d112      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c2:	4b82      	ldr	r3, [pc, #520]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ce:	d10b      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	4b7e      	ldr	r3, [pc, #504]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05b      	beq.n	8004794 <HAL_RCC_OscConfig+0x108>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d157      	bne.n	8004794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e242      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f0:	d106      	bne.n	8004700 <HAL_RCC_OscConfig+0x74>
 80046f2:	4b76      	ldr	r3, [pc, #472]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a75      	ldr	r2, [pc, #468]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e01d      	b.n	800473c <HAL_RCC_OscConfig+0xb0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004708:	d10c      	bne.n	8004724 <HAL_RCC_OscConfig+0x98>
 800470a:	4b70      	ldr	r3, [pc, #448]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a6f      	ldr	r2, [pc, #444]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	4b6d      	ldr	r3, [pc, #436]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a6c      	ldr	r2, [pc, #432]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e00b      	b.n	800473c <HAL_RCC_OscConfig+0xb0>
 8004724:	4b69      	ldr	r3, [pc, #420]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a68      	ldr	r2, [pc, #416]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800472a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b66      	ldr	r3, [pc, #408]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a65      	ldr	r2, [pc, #404]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800473a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d013      	beq.n	800476c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fe fb20 	bl	8002d88 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800474c:	f7fe fb1c 	bl	8002d88 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	@ 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e207      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	4b5b      	ldr	r3, [pc, #364]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0xc0>
 800476a:	e014      	b.n	8004796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fe fb0c 	bl	8002d88 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004774:	f7fe fb08 	bl	8002d88 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	@ 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e1f3      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004786:	4b51      	ldr	r3, [pc, #324]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0xe8>
 8004792:	e000      	b.n	8004796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d063      	beq.n	800486a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047a2:	4b4a      	ldr	r3, [pc, #296]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ae:	4b47      	ldr	r3, [pc, #284]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d11c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ba:	4b44      	ldr	r3, [pc, #272]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d116      	bne.n	80047f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c6:	4b41      	ldr	r3, [pc, #260]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_RCC_OscConfig+0x152>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d001      	beq.n	80047de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e1c7      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047de:	4b3b      	ldr	r3, [pc, #236]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4937      	ldr	r1, [pc, #220]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	e03a      	b.n	800486a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047fc:	4b34      	ldr	r3, [pc, #208]	@ (80048d0 <HAL_RCC_OscConfig+0x244>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fe fac1 	bl	8002d88 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480a:	f7fe fabd 	bl	8002d88 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e1a8      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	4b2b      	ldr	r3, [pc, #172]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004828:	4b28      	ldr	r3, [pc, #160]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4925      	ldr	r1, [pc, #148]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]
 800483c:	e015      	b.n	800486a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <HAL_RCC_OscConfig+0x244>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fe faa0 	bl	8002d88 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800484c:	f7fe fa9c 	bl	8002d88 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e187      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d036      	beq.n	80048e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d016      	beq.n	80048ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800487e:	4b15      	ldr	r3, [pc, #84]	@ (80048d4 <HAL_RCC_OscConfig+0x248>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fe fa80 	bl	8002d88 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800488c:	f7fe fa7c 	bl	8002d88 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e167      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489e:	4b0b      	ldr	r3, [pc, #44]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80048a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x200>
 80048aa:	e01b      	b.n	80048e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <HAL_RCC_OscConfig+0x248>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b2:	f7fe fa69 	bl	8002d88 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	e00e      	b.n	80048d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fe fa65 	bl	8002d88 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d907      	bls.n	80048d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e150      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
 80048cc:	40023800 	.word	0x40023800
 80048d0:	42470000 	.word	0x42470000
 80048d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d8:	4b88      	ldr	r3, [pc, #544]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80048da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ea      	bne.n	80048ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8097 	beq.w	8004a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f6:	4b81      	ldr	r3, [pc, #516]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	4b7d      	ldr	r3, [pc, #500]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	4a7c      	ldr	r2, [pc, #496]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004910:	6413      	str	r3, [r2, #64]	@ 0x40
 8004912:	4b7a      	ldr	r3, [pc, #488]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004922:	4b77      	ldr	r3, [pc, #476]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d118      	bne.n	8004960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492e:	4b74      	ldr	r3, [pc, #464]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a73      	ldr	r2, [pc, #460]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493a:	f7fe fa25 	bl	8002d88 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004942:	f7fe fa21 	bl	8002d88 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e10c      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	4b6a      	ldr	r3, [pc, #424]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d106      	bne.n	8004976 <HAL_RCC_OscConfig+0x2ea>
 8004968:	4b64      	ldr	r3, [pc, #400]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496c:	4a63      	ldr	r2, [pc, #396]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	@ 0x70
 8004974:	e01c      	b.n	80049b0 <HAL_RCC_OscConfig+0x324>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b05      	cmp	r3, #5
 800497c:	d10c      	bne.n	8004998 <HAL_RCC_OscConfig+0x30c>
 800497e:	4b5f      	ldr	r3, [pc, #380]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004982:	4a5e      	ldr	r2, [pc, #376]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	6713      	str	r3, [r2, #112]	@ 0x70
 800498a:	4b5c      	ldr	r3, [pc, #368]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498e:	4a5b      	ldr	r2, [pc, #364]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6713      	str	r3, [r2, #112]	@ 0x70
 8004996:	e00b      	b.n	80049b0 <HAL_RCC_OscConfig+0x324>
 8004998:	4b58      	ldr	r3, [pc, #352]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499c:	4a57      	ldr	r2, [pc, #348]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a4:	4b55      	ldr	r3, [pc, #340]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a8:	4a54      	ldr	r2, [pc, #336]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80049aa:	f023 0304 	bic.w	r3, r3, #4
 80049ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d015      	beq.n	80049e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fe f9e6 	bl	8002d88 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fe f9e2 	bl	8002d88 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0cb      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	4b49      	ldr	r3, [pc, #292]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ee      	beq.n	80049c0 <HAL_RCC_OscConfig+0x334>
 80049e2:	e014      	b.n	8004a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e4:	f7fe f9d0 	bl	8002d88 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fe f9cc 	bl	8002d88 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0b5      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a02:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1ee      	bne.n	80049ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d105      	bne.n	8004a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a14:	4b39      	ldr	r3, [pc, #228]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	4a38      	ldr	r2, [pc, #224]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80a1 	beq.w	8004b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a2a:	4b34      	ldr	r3, [pc, #208]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d05c      	beq.n	8004af0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d141      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3e:	4b31      	ldr	r3, [pc, #196]	@ (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7fe f9a0 	bl	8002d88 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fe f99c 	bl	8002d88 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e087      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	019b      	lsls	r3, r3, #6
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	3b01      	subs	r3, #1
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	491b      	ldr	r1, [pc, #108]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a94:	4b1b      	ldr	r3, [pc, #108]	@ (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9a:	f7fe f975 	bl	8002d88 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7fe f971 	bl	8002d88 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e05c      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab4:	4b11      	ldr	r3, [pc, #68]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x416>
 8004ac0:	e054      	b.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac2:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fe f95e 	bl	8002d88 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fe f95a 	bl	8002d88 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e045      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae2:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x444>
 8004aee:	e03d      	b.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d107      	bne.n	8004b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e038      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40007000 	.word	0x40007000
 8004b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b08:	4b1b      	ldr	r3, [pc, #108]	@ (8004b78 <HAL_RCC_OscConfig+0x4ec>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d028      	beq.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d121      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d11a      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d111      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	3b01      	subs	r3, #1
 8004b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d107      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800

08004b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0cc      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b90:	4b68      	ldr	r3, [pc, #416]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d90c      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b65      	ldr	r3, [pc, #404]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b63      	ldr	r3, [pc, #396]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0b8      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd0:	4b59      	ldr	r3, [pc, #356]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4a58      	ldr	r2, [pc, #352]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be8:	4b53      	ldr	r3, [pc, #332]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a52      	ldr	r2, [pc, #328]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf4:	4b50      	ldr	r3, [pc, #320]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	494d      	ldr	r1, [pc, #308]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d044      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	4b47      	ldr	r3, [pc, #284]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d119      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d107      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e06f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e067      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c5a:	4b37      	ldr	r3, [pc, #220]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f023 0203 	bic.w	r2, r3, #3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4934      	ldr	r1, [pc, #208]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c6c:	f7fe f88c 	bl	8002d88 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c74:	f7fe f888 	bl	8002d88 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e04f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 020c 	and.w	r2, r3, #12
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d1eb      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c9c:	4b25      	ldr	r3, [pc, #148]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d20c      	bcs.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004caa:	4b22      	ldr	r3, [pc, #136]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb2:	4b20      	ldr	r3, [pc, #128]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e032      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd0:	4b19      	ldr	r3, [pc, #100]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4916      	ldr	r1, [pc, #88]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cee:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	490e      	ldr	r1, [pc, #56]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d02:	f000 f821 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8004d06:	4602      	mov	r2, r0
 8004d08:	4b0b      	ldr	r3, [pc, #44]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	490a      	ldr	r1, [pc, #40]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	5ccb      	ldrb	r3, [r1, r3]
 8004d16:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1a:	4a09      	ldr	r2, [pc, #36]	@ (8004d40 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d1e:	4b09      	ldr	r3, [pc, #36]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd ffec 	bl	8002d00 <HAL_InitTick>

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40023c00 	.word	0x40023c00
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	080068cc 	.word	0x080068cc
 8004d40:	20000000 	.word	0x20000000
 8004d44:	20000004 	.word	0x20000004

08004d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d4c:	b094      	sub	sp, #80	@ 0x50
 8004d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d54:	2300      	movs	r3, #0
 8004d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d58:	2300      	movs	r3, #0
 8004d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d60:	4b79      	ldr	r3, [pc, #484]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d00d      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x40>
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	f200 80e1 	bhi.w	8004f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x34>
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d003      	beq.n	8004d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d7a:	e0db      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b73      	ldr	r3, [pc, #460]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004d80:	e0db      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d82:	4b73      	ldr	r3, [pc, #460]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d86:	e0d8      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d88:	4b6f      	ldr	r3, [pc, #444]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d90:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d92:	4b6d      	ldr	r3, [pc, #436]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d063      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	2200      	movs	r2, #0
 8004da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004db2:	2300      	movs	r3, #0
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dba:	4622      	mov	r2, r4
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	f04f 0000 	mov.w	r0, #0
 8004dc2:	f04f 0100 	mov.w	r1, #0
 8004dc6:	0159      	lsls	r1, r3, #5
 8004dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dcc:	0150      	lsls	r0, r2, #5
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	1a51      	subs	r1, r2, r1
 8004dd6:	6139      	str	r1, [r7, #16]
 8004dd8:	4629      	mov	r1, r5
 8004dda:	eb63 0301 	sbc.w	r3, r3, r1
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dec:	4659      	mov	r1, fp
 8004dee:	018b      	lsls	r3, r1, #6
 8004df0:	4651      	mov	r1, sl
 8004df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004df6:	4651      	mov	r1, sl
 8004df8:	018a      	lsls	r2, r1, #6
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8004e00:	4659      	mov	r1, fp
 8004e02:	eb63 0901 	sbc.w	r9, r3, r1
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e1a:	4690      	mov	r8, r2
 8004e1c:	4699      	mov	r9, r3
 8004e1e:	4623      	mov	r3, r4
 8004e20:	eb18 0303 	adds.w	r3, r8, r3
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	462b      	mov	r3, r5
 8004e28:	eb49 0303 	adc.w	r3, r9, r3
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	024b      	lsls	r3, r1, #9
 8004e3e:	4621      	mov	r1, r4
 8004e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e44:	4621      	mov	r1, r4
 8004e46:	024a      	lsls	r2, r1, #9
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4e:	2200      	movs	r2, #0
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e58:	f7fb fa12 	bl	8000280 <__aeabi_uldivmod>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4613      	mov	r3, r2
 8004e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e64:	e058      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e66:	4b38      	ldr	r3, [pc, #224]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	099b      	lsrs	r3, r3, #6
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	4611      	mov	r1, r2
 8004e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	f04f 0000 	mov.w	r0, #0
 8004e88:	f04f 0100 	mov.w	r1, #0
 8004e8c:	0159      	lsls	r1, r3, #5
 8004e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e92:	0150      	lsls	r0, r2, #5
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4641      	mov	r1, r8
 8004e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8004ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	00eb      	lsls	r3, r5, #3
 8004eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ece:	00e2      	lsls	r2, r4, #3
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	4643      	mov	r3, r8
 8004ed6:	18e3      	adds	r3, r4, r3
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	464b      	mov	r3, r9
 8004edc:	eb45 0303 	adc.w	r3, r5, r3
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eee:	4629      	mov	r1, r5
 8004ef0:	028b      	lsls	r3, r1, #10
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ef8:	4621      	mov	r1, r4
 8004efa:	028a      	lsls	r2, r1, #10
 8004efc:	4610      	mov	r0, r2
 8004efe:	4619      	mov	r1, r3
 8004f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f02:	2200      	movs	r2, #0
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	61fa      	str	r2, [r7, #28]
 8004f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f0c:	f7fb f9b8 	bl	8000280 <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4613      	mov	r3, r2
 8004f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f18:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	3301      	adds	r3, #1
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f32:	e002      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f34:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3750      	adds	r7, #80	@ 0x50
 8004f40:	46bd      	mov	sp, r7
 8004f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	007a1200 	.word	0x007a1200

08004f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f58:	4b03      	ldr	r3, [pc, #12]	@ (8004f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000000 	.word	0x20000000

08004f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f70:	f7ff fff0 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b05      	ldr	r3, [pc, #20]	@ (8004f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	0a9b      	lsrs	r3, r3, #10
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	4903      	ldr	r1, [pc, #12]	@ (8004f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f82:	5ccb      	ldrb	r3, [r1, r3]
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	080068dc 	.word	0x080068dc

08004f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f98:	f7ff ffdc 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	0b5b      	lsrs	r3, r3, #13
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4903      	ldr	r1, [pc, #12]	@ (8004fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	080068dc 	.word	0x080068dc

08004fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e042      	b.n	8005054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fb fef6 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	@ 0x24
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f973 	bl	80052ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	@ 0x28
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b20      	cmp	r3, #32
 800507a:	d175      	bne.n	8005168 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_UART_Transmit+0x2c>
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e06e      	b.n	800516a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2221      	movs	r2, #33	@ 0x21
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800509a:	f7fd fe75 	bl	8002d88 <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	88fa      	ldrh	r2, [r7, #6]
 80050a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	88fa      	ldrh	r2, [r7, #6]
 80050aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b4:	d108      	bne.n	80050c8 <HAL_UART_Transmit+0x6c>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e003      	b.n	80050d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050d0:	e02e      	b.n	8005130 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	2180      	movs	r1, #128	@ 0x80
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f848 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e03a      	b.n	800516a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	3302      	adds	r3, #2
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e007      	b.n	8005122 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1cb      	bne.n	80050d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2200      	movs	r2, #0
 8005142:	2140      	movs	r1, #64	@ 0x40
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f814 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e006      	b.n	800516a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e000      	b.n	800516a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b086      	sub	sp, #24
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005182:	e03b      	b.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d037      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518c:	f7fd fdfc 	bl	8002d88 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	6a3a      	ldr	r2, [r7, #32]
 8005198:	429a      	cmp	r2, r3
 800519a:	d302      	bcc.n	80051a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e03a      	b.n	800521c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d023      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b80      	cmp	r3, #128	@ 0x80
 80051b8:	d020      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b40      	cmp	r3, #64	@ 0x40
 80051be:	d01d      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d116      	bne.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f81d 	bl	8005224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2208      	movs	r2, #8
 80051ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e00f      	b.n	800521c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4013      	ands	r3, r2
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	429a      	cmp	r2, r3
 8005218:	d0b4      	beq.n	8005184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005224:	b480      	push	{r7}
 8005226:	b095      	sub	sp, #84	@ 0x54
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800524c:	643a      	str	r2, [r7, #64]	@ 0x40
 800524e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005252:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3314      	adds	r3, #20
 8005266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e5      	bne.n	8005260 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	2b01      	cmp	r3, #1
 800529a:	d119      	bne.n	80052d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f023 0310 	bic.w	r3, r3, #16
 80052b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052bc:	61ba      	str	r2, [r7, #24]
 80052be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6979      	ldr	r1, [r7, #20]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e5      	bne.n	800529c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052de:	bf00      	nop
 80052e0:	3754      	adds	r7, #84	@ 0x54
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f0:	b0c0      	sub	sp, #256	@ 0x100
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	68d9      	ldr	r1, [r3, #12]
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	ea40 0301 	orr.w	r3, r0, r1
 8005314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	431a      	orrs	r2, r3
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	431a      	orrs	r2, r3
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005344:	f021 010c 	bic.w	r1, r1, #12
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005352:	430b      	orrs	r3, r1
 8005354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005366:	6999      	ldr	r1, [r3, #24]
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	ea40 0301 	orr.w	r3, r0, r1
 8005372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b8f      	ldr	r3, [pc, #572]	@ (80055b8 <UART_SetConfig+0x2cc>)
 800537c:	429a      	cmp	r2, r3
 800537e:	d005      	beq.n	800538c <UART_SetConfig+0xa0>
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b8d      	ldr	r3, [pc, #564]	@ (80055bc <UART_SetConfig+0x2d0>)
 8005388:	429a      	cmp	r2, r3
 800538a:	d104      	bne.n	8005396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800538c:	f7ff fe02 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 8005390:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005394:	e003      	b.n	800539e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005396:	f7ff fde9 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 800539a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a8:	f040 810c 	bne.w	80055c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053be:	4622      	mov	r2, r4
 80053c0:	462b      	mov	r3, r5
 80053c2:	1891      	adds	r1, r2, r2
 80053c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053c6:	415b      	adcs	r3, r3
 80053c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053ce:	4621      	mov	r1, r4
 80053d0:	eb12 0801 	adds.w	r8, r2, r1
 80053d4:	4629      	mov	r1, r5
 80053d6:	eb43 0901 	adc.w	r9, r3, r1
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ee:	4690      	mov	r8, r2
 80053f0:	4699      	mov	r9, r3
 80053f2:	4623      	mov	r3, r4
 80053f4:	eb18 0303 	adds.w	r3, r8, r3
 80053f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053fc:	462b      	mov	r3, r5
 80053fe:	eb49 0303 	adc.w	r3, r9, r3
 8005402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005412:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800541a:	460b      	mov	r3, r1
 800541c:	18db      	adds	r3, r3, r3
 800541e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005420:	4613      	mov	r3, r2
 8005422:	eb42 0303 	adc.w	r3, r2, r3
 8005426:	657b      	str	r3, [r7, #84]	@ 0x54
 8005428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800542c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005430:	f7fa ff26 	bl	8000280 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4b61      	ldr	r3, [pc, #388]	@ (80055c0 <UART_SetConfig+0x2d4>)
 800543a:	fba3 2302 	umull	r2, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	011c      	lsls	r4, r3, #4
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800544c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005454:	4642      	mov	r2, r8
 8005456:	464b      	mov	r3, r9
 8005458:	1891      	adds	r1, r2, r2
 800545a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800545c:	415b      	adcs	r3, r3
 800545e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005464:	4641      	mov	r1, r8
 8005466:	eb12 0a01 	adds.w	sl, r2, r1
 800546a:	4649      	mov	r1, r9
 800546c:	eb43 0b01 	adc.w	fp, r3, r1
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800547c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005484:	4692      	mov	sl, r2
 8005486:	469b      	mov	fp, r3
 8005488:	4643      	mov	r3, r8
 800548a:	eb1a 0303 	adds.w	r3, sl, r3
 800548e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005492:	464b      	mov	r3, r9
 8005494:	eb4b 0303 	adc.w	r3, fp, r3
 8005498:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054b0:	460b      	mov	r3, r1
 80054b2:	18db      	adds	r3, r3, r3
 80054b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80054b6:	4613      	mov	r3, r2
 80054b8:	eb42 0303 	adc.w	r3, r2, r3
 80054bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054c6:	f7fa fedb 	bl	8000280 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4611      	mov	r1, r2
 80054d0:	4b3b      	ldr	r3, [pc, #236]	@ (80055c0 <UART_SetConfig+0x2d4>)
 80054d2:	fba3 2301 	umull	r2, r3, r3, r1
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	2264      	movs	r2, #100	@ 0x64
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	1acb      	subs	r3, r1, r3
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054e6:	4b36      	ldr	r3, [pc, #216]	@ (80055c0 <UART_SetConfig+0x2d4>)
 80054e8:	fba3 2302 	umull	r2, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054f4:	441c      	add	r4, r3
 80054f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005500:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	1891      	adds	r1, r2, r2
 800550e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005510:	415b      	adcs	r3, r3
 8005512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005518:	4641      	mov	r1, r8
 800551a:	1851      	adds	r1, r2, r1
 800551c:	6339      	str	r1, [r7, #48]	@ 0x30
 800551e:	4649      	mov	r1, r9
 8005520:	414b      	adcs	r3, r1
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005530:	4659      	mov	r1, fp
 8005532:	00cb      	lsls	r3, r1, #3
 8005534:	4651      	mov	r1, sl
 8005536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800553a:	4651      	mov	r1, sl
 800553c:	00ca      	lsls	r2, r1, #3
 800553e:	4610      	mov	r0, r2
 8005540:	4619      	mov	r1, r3
 8005542:	4603      	mov	r3, r0
 8005544:	4642      	mov	r2, r8
 8005546:	189b      	adds	r3, r3, r2
 8005548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800554c:	464b      	mov	r3, r9
 800554e:	460a      	mov	r2, r1
 8005550:	eb42 0303 	adc.w	r3, r2, r3
 8005554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005564:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800556c:	460b      	mov	r3, r1
 800556e:	18db      	adds	r3, r3, r3
 8005570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005572:	4613      	mov	r3, r2
 8005574:	eb42 0303 	adc.w	r3, r2, r3
 8005578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800557a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800557e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005582:	f7fa fe7d 	bl	8000280 <__aeabi_uldivmod>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4b0d      	ldr	r3, [pc, #52]	@ (80055c0 <UART_SetConfig+0x2d4>)
 800558c:	fba3 1302 	umull	r1, r3, r3, r2
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	2164      	movs	r1, #100	@ 0x64
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	3332      	adds	r3, #50	@ 0x32
 800559e:	4a08      	ldr	r2, [pc, #32]	@ (80055c0 <UART_SetConfig+0x2d4>)
 80055a0:	fba2 2303 	umull	r2, r3, r2, r3
 80055a4:	095b      	lsrs	r3, r3, #5
 80055a6:	f003 0207 	and.w	r2, r3, #7
 80055aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4422      	add	r2, r4
 80055b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055b4:	e106      	b.n	80057c4 <UART_SetConfig+0x4d8>
 80055b6:	bf00      	nop
 80055b8:	40011000 	.word	0x40011000
 80055bc:	40011400 	.word	0x40011400
 80055c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c8:	2200      	movs	r2, #0
 80055ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055d6:	4642      	mov	r2, r8
 80055d8:	464b      	mov	r3, r9
 80055da:	1891      	adds	r1, r2, r2
 80055dc:	6239      	str	r1, [r7, #32]
 80055de:	415b      	adcs	r3, r3
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055e6:	4641      	mov	r1, r8
 80055e8:	1854      	adds	r4, r2, r1
 80055ea:	4649      	mov	r1, r9
 80055ec:	eb43 0501 	adc.w	r5, r3, r1
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	00eb      	lsls	r3, r5, #3
 80055fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055fe:	00e2      	lsls	r2, r4, #3
 8005600:	4614      	mov	r4, r2
 8005602:	461d      	mov	r5, r3
 8005604:	4643      	mov	r3, r8
 8005606:	18e3      	adds	r3, r4, r3
 8005608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800560c:	464b      	mov	r3, r9
 800560e:	eb45 0303 	adc.w	r3, r5, r3
 8005612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005622:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005632:	4629      	mov	r1, r5
 8005634:	008b      	lsls	r3, r1, #2
 8005636:	4621      	mov	r1, r4
 8005638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800563c:	4621      	mov	r1, r4
 800563e:	008a      	lsls	r2, r1, #2
 8005640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005644:	f7fa fe1c 	bl	8000280 <__aeabi_uldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4b60      	ldr	r3, [pc, #384]	@ (80057d0 <UART_SetConfig+0x4e4>)
 800564e:	fba3 2302 	umull	r2, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	011c      	lsls	r4, r3, #4
 8005656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800565a:	2200      	movs	r2, #0
 800565c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005660:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005668:	4642      	mov	r2, r8
 800566a:	464b      	mov	r3, r9
 800566c:	1891      	adds	r1, r2, r2
 800566e:	61b9      	str	r1, [r7, #24]
 8005670:	415b      	adcs	r3, r3
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005678:	4641      	mov	r1, r8
 800567a:	1851      	adds	r1, r2, r1
 800567c:	6139      	str	r1, [r7, #16]
 800567e:	4649      	mov	r1, r9
 8005680:	414b      	adcs	r3, r1
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005690:	4659      	mov	r1, fp
 8005692:	00cb      	lsls	r3, r1, #3
 8005694:	4651      	mov	r1, sl
 8005696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800569a:	4651      	mov	r1, sl
 800569c:	00ca      	lsls	r2, r1, #3
 800569e:	4610      	mov	r0, r2
 80056a0:	4619      	mov	r1, r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	4642      	mov	r2, r8
 80056a6:	189b      	adds	r3, r3, r2
 80056a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056ac:	464b      	mov	r3, r9
 80056ae:	460a      	mov	r2, r1
 80056b0:	eb42 0303 	adc.w	r3, r2, r3
 80056b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056d0:	4649      	mov	r1, r9
 80056d2:	008b      	lsls	r3, r1, #2
 80056d4:	4641      	mov	r1, r8
 80056d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056da:	4641      	mov	r1, r8
 80056dc:	008a      	lsls	r2, r1, #2
 80056de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056e2:	f7fa fdcd 	bl	8000280 <__aeabi_uldivmod>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	4b38      	ldr	r3, [pc, #224]	@ (80057d0 <UART_SetConfig+0x4e4>)
 80056ee:	fba3 2301 	umull	r2, r3, r3, r1
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2264      	movs	r2, #100	@ 0x64
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	1acb      	subs	r3, r1, r3
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	3332      	adds	r3, #50	@ 0x32
 8005700:	4a33      	ldr	r2, [pc, #204]	@ (80057d0 <UART_SetConfig+0x4e4>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800570c:	441c      	add	r4, r3
 800570e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005712:	2200      	movs	r2, #0
 8005714:	673b      	str	r3, [r7, #112]	@ 0x70
 8005716:	677a      	str	r2, [r7, #116]	@ 0x74
 8005718:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800571c:	4642      	mov	r2, r8
 800571e:	464b      	mov	r3, r9
 8005720:	1891      	adds	r1, r2, r2
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	415b      	adcs	r3, r3
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800572c:	4641      	mov	r1, r8
 800572e:	1851      	adds	r1, r2, r1
 8005730:	6039      	str	r1, [r7, #0]
 8005732:	4649      	mov	r1, r9
 8005734:	414b      	adcs	r3, r1
 8005736:	607b      	str	r3, [r7, #4]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005744:	4659      	mov	r1, fp
 8005746:	00cb      	lsls	r3, r1, #3
 8005748:	4651      	mov	r1, sl
 800574a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800574e:	4651      	mov	r1, sl
 8005750:	00ca      	lsls	r2, r1, #3
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	4603      	mov	r3, r0
 8005758:	4642      	mov	r2, r8
 800575a:	189b      	adds	r3, r3, r2
 800575c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800575e:	464b      	mov	r3, r9
 8005760:	460a      	mov	r2, r1
 8005762:	eb42 0303 	adc.w	r3, r2, r3
 8005766:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	663b      	str	r3, [r7, #96]	@ 0x60
 8005772:	667a      	str	r2, [r7, #100]	@ 0x64
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005780:	4649      	mov	r1, r9
 8005782:	008b      	lsls	r3, r1, #2
 8005784:	4641      	mov	r1, r8
 8005786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800578a:	4641      	mov	r1, r8
 800578c:	008a      	lsls	r2, r1, #2
 800578e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005792:	f7fa fd75 	bl	8000280 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <UART_SetConfig+0x4e4>)
 800579c:	fba3 1302 	umull	r1, r3, r3, r2
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	2164      	movs	r1, #100	@ 0x64
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	3332      	adds	r3, #50	@ 0x32
 80057ae:	4a08      	ldr	r2, [pc, #32]	@ (80057d0 <UART_SetConfig+0x4e4>)
 80057b0:	fba2 2303 	umull	r2, r3, r2, r3
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	f003 020f 	and.w	r2, r3, #15
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4422      	add	r2, r4
 80057c2:	609a      	str	r2, [r3, #8]
}
 80057c4:	bf00      	nop
 80057c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057ca:	46bd      	mov	sp, r7
 80057cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d0:	51eb851f 	.word	0x51eb851f

080057d4 <std>:
 80057d4:	2300      	movs	r3, #0
 80057d6:	b510      	push	{r4, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	e9c0 3300 	strd	r3, r3, [r0]
 80057de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057e2:	6083      	str	r3, [r0, #8]
 80057e4:	8181      	strh	r1, [r0, #12]
 80057e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057e8:	81c2      	strh	r2, [r0, #14]
 80057ea:	6183      	str	r3, [r0, #24]
 80057ec:	4619      	mov	r1, r3
 80057ee:	2208      	movs	r2, #8
 80057f0:	305c      	adds	r0, #92	@ 0x5c
 80057f2:	f000 f9f9 	bl	8005be8 <memset>
 80057f6:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <std+0x58>)
 80057f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80057fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <std+0x5c>)
 80057fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005834 <std+0x60>)
 8005800:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <std+0x64>)
 8005804:	6323      	str	r3, [r4, #48]	@ 0x30
 8005806:	4b0d      	ldr	r3, [pc, #52]	@ (800583c <std+0x68>)
 8005808:	6224      	str	r4, [r4, #32]
 800580a:	429c      	cmp	r4, r3
 800580c:	d006      	beq.n	800581c <std+0x48>
 800580e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005812:	4294      	cmp	r4, r2
 8005814:	d002      	beq.n	800581c <std+0x48>
 8005816:	33d0      	adds	r3, #208	@ 0xd0
 8005818:	429c      	cmp	r4, r3
 800581a:	d105      	bne.n	8005828 <std+0x54>
 800581c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005824:	f000 ba58 	b.w	8005cd8 <__retarget_lock_init_recursive>
 8005828:	bd10      	pop	{r4, pc}
 800582a:	bf00      	nop
 800582c:	08005a39 	.word	0x08005a39
 8005830:	08005a5b 	.word	0x08005a5b
 8005834:	08005a93 	.word	0x08005a93
 8005838:	08005ab7 	.word	0x08005ab7
 800583c:	20001138 	.word	0x20001138

08005840 <stdio_exit_handler>:
 8005840:	4a02      	ldr	r2, [pc, #8]	@ (800584c <stdio_exit_handler+0xc>)
 8005842:	4903      	ldr	r1, [pc, #12]	@ (8005850 <stdio_exit_handler+0x10>)
 8005844:	4803      	ldr	r0, [pc, #12]	@ (8005854 <stdio_exit_handler+0x14>)
 8005846:	f000 b869 	b.w	800591c <_fwalk_sglue>
 800584a:	bf00      	nop
 800584c:	2000000c 	.word	0x2000000c
 8005850:	08006595 	.word	0x08006595
 8005854:	2000001c 	.word	0x2000001c

08005858 <cleanup_stdio>:
 8005858:	6841      	ldr	r1, [r0, #4]
 800585a:	4b0c      	ldr	r3, [pc, #48]	@ (800588c <cleanup_stdio+0x34>)
 800585c:	4299      	cmp	r1, r3
 800585e:	b510      	push	{r4, lr}
 8005860:	4604      	mov	r4, r0
 8005862:	d001      	beq.n	8005868 <cleanup_stdio+0x10>
 8005864:	f000 fe96 	bl	8006594 <_fflush_r>
 8005868:	68a1      	ldr	r1, [r4, #8]
 800586a:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <cleanup_stdio+0x38>)
 800586c:	4299      	cmp	r1, r3
 800586e:	d002      	beq.n	8005876 <cleanup_stdio+0x1e>
 8005870:	4620      	mov	r0, r4
 8005872:	f000 fe8f 	bl	8006594 <_fflush_r>
 8005876:	68e1      	ldr	r1, [r4, #12]
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <cleanup_stdio+0x3c>)
 800587a:	4299      	cmp	r1, r3
 800587c:	d004      	beq.n	8005888 <cleanup_stdio+0x30>
 800587e:	4620      	mov	r0, r4
 8005880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005884:	f000 be86 	b.w	8006594 <_fflush_r>
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	20001138 	.word	0x20001138
 8005890:	200011a0 	.word	0x200011a0
 8005894:	20001208 	.word	0x20001208

08005898 <global_stdio_init.part.0>:
 8005898:	b510      	push	{r4, lr}
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <global_stdio_init.part.0+0x30>)
 800589c:	4c0b      	ldr	r4, [pc, #44]	@ (80058cc <global_stdio_init.part.0+0x34>)
 800589e:	4a0c      	ldr	r2, [pc, #48]	@ (80058d0 <global_stdio_init.part.0+0x38>)
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	4620      	mov	r0, r4
 80058a4:	2200      	movs	r2, #0
 80058a6:	2104      	movs	r1, #4
 80058a8:	f7ff ff94 	bl	80057d4 <std>
 80058ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058b0:	2201      	movs	r2, #1
 80058b2:	2109      	movs	r1, #9
 80058b4:	f7ff ff8e 	bl	80057d4 <std>
 80058b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058bc:	2202      	movs	r2, #2
 80058be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c2:	2112      	movs	r1, #18
 80058c4:	f7ff bf86 	b.w	80057d4 <std>
 80058c8:	20001270 	.word	0x20001270
 80058cc:	20001138 	.word	0x20001138
 80058d0:	08005841 	.word	0x08005841

080058d4 <__sfp_lock_acquire>:
 80058d4:	4801      	ldr	r0, [pc, #4]	@ (80058dc <__sfp_lock_acquire+0x8>)
 80058d6:	f000 ba00 	b.w	8005cda <__retarget_lock_acquire_recursive>
 80058da:	bf00      	nop
 80058dc:	20001279 	.word	0x20001279

080058e0 <__sfp_lock_release>:
 80058e0:	4801      	ldr	r0, [pc, #4]	@ (80058e8 <__sfp_lock_release+0x8>)
 80058e2:	f000 b9fb 	b.w	8005cdc <__retarget_lock_release_recursive>
 80058e6:	bf00      	nop
 80058e8:	20001279 	.word	0x20001279

080058ec <__sinit>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	4604      	mov	r4, r0
 80058f0:	f7ff fff0 	bl	80058d4 <__sfp_lock_acquire>
 80058f4:	6a23      	ldr	r3, [r4, #32]
 80058f6:	b11b      	cbz	r3, 8005900 <__sinit+0x14>
 80058f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058fc:	f7ff bff0 	b.w	80058e0 <__sfp_lock_release>
 8005900:	4b04      	ldr	r3, [pc, #16]	@ (8005914 <__sinit+0x28>)
 8005902:	6223      	str	r3, [r4, #32]
 8005904:	4b04      	ldr	r3, [pc, #16]	@ (8005918 <__sinit+0x2c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f5      	bne.n	80058f8 <__sinit+0xc>
 800590c:	f7ff ffc4 	bl	8005898 <global_stdio_init.part.0>
 8005910:	e7f2      	b.n	80058f8 <__sinit+0xc>
 8005912:	bf00      	nop
 8005914:	08005859 	.word	0x08005859
 8005918:	20001270 	.word	0x20001270

0800591c <_fwalk_sglue>:
 800591c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005920:	4607      	mov	r7, r0
 8005922:	4688      	mov	r8, r1
 8005924:	4614      	mov	r4, r2
 8005926:	2600      	movs	r6, #0
 8005928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800592c:	f1b9 0901 	subs.w	r9, r9, #1
 8005930:	d505      	bpl.n	800593e <_fwalk_sglue+0x22>
 8005932:	6824      	ldr	r4, [r4, #0]
 8005934:	2c00      	cmp	r4, #0
 8005936:	d1f7      	bne.n	8005928 <_fwalk_sglue+0xc>
 8005938:	4630      	mov	r0, r6
 800593a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d907      	bls.n	8005954 <_fwalk_sglue+0x38>
 8005944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005948:	3301      	adds	r3, #1
 800594a:	d003      	beq.n	8005954 <_fwalk_sglue+0x38>
 800594c:	4629      	mov	r1, r5
 800594e:	4638      	mov	r0, r7
 8005950:	47c0      	blx	r8
 8005952:	4306      	orrs	r6, r0
 8005954:	3568      	adds	r5, #104	@ 0x68
 8005956:	e7e9      	b.n	800592c <_fwalk_sglue+0x10>

08005958 <iprintf>:
 8005958:	b40f      	push	{r0, r1, r2, r3}
 800595a:	b507      	push	{r0, r1, r2, lr}
 800595c:	4906      	ldr	r1, [pc, #24]	@ (8005978 <iprintf+0x20>)
 800595e:	ab04      	add	r3, sp, #16
 8005960:	6808      	ldr	r0, [r1, #0]
 8005962:	f853 2b04 	ldr.w	r2, [r3], #4
 8005966:	6881      	ldr	r1, [r0, #8]
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	f000 fae9 	bl	8005f40 <_vfiprintf_r>
 800596e:	b003      	add	sp, #12
 8005970:	f85d eb04 	ldr.w	lr, [sp], #4
 8005974:	b004      	add	sp, #16
 8005976:	4770      	bx	lr
 8005978:	20000018 	.word	0x20000018

0800597c <_puts_r>:
 800597c:	6a03      	ldr	r3, [r0, #32]
 800597e:	b570      	push	{r4, r5, r6, lr}
 8005980:	6884      	ldr	r4, [r0, #8]
 8005982:	4605      	mov	r5, r0
 8005984:	460e      	mov	r6, r1
 8005986:	b90b      	cbnz	r3, 800598c <_puts_r+0x10>
 8005988:	f7ff ffb0 	bl	80058ec <__sinit>
 800598c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800598e:	07db      	lsls	r3, r3, #31
 8005990:	d405      	bmi.n	800599e <_puts_r+0x22>
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	0598      	lsls	r0, r3, #22
 8005996:	d402      	bmi.n	800599e <_puts_r+0x22>
 8005998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800599a:	f000 f99e 	bl	8005cda <__retarget_lock_acquire_recursive>
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	0719      	lsls	r1, r3, #28
 80059a2:	d502      	bpl.n	80059aa <_puts_r+0x2e>
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d135      	bne.n	8005a16 <_puts_r+0x9a>
 80059aa:	4621      	mov	r1, r4
 80059ac:	4628      	mov	r0, r5
 80059ae:	f000 f8c5 	bl	8005b3c <__swsetup_r>
 80059b2:	b380      	cbz	r0, 8005a16 <_puts_r+0x9a>
 80059b4:	f04f 35ff 	mov.w	r5, #4294967295
 80059b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059ba:	07da      	lsls	r2, r3, #31
 80059bc:	d405      	bmi.n	80059ca <_puts_r+0x4e>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	059b      	lsls	r3, r3, #22
 80059c2:	d402      	bmi.n	80059ca <_puts_r+0x4e>
 80059c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059c6:	f000 f989 	bl	8005cdc <__retarget_lock_release_recursive>
 80059ca:	4628      	mov	r0, r5
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	da04      	bge.n	80059dc <_puts_r+0x60>
 80059d2:	69a2      	ldr	r2, [r4, #24]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	dc17      	bgt.n	8005a08 <_puts_r+0x8c>
 80059d8:	290a      	cmp	r1, #10
 80059da:	d015      	beq.n	8005a08 <_puts_r+0x8c>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	6022      	str	r2, [r4, #0]
 80059e2:	7019      	strb	r1, [r3, #0]
 80059e4:	68a3      	ldr	r3, [r4, #8]
 80059e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059ea:	3b01      	subs	r3, #1
 80059ec:	60a3      	str	r3, [r4, #8]
 80059ee:	2900      	cmp	r1, #0
 80059f0:	d1ed      	bne.n	80059ce <_puts_r+0x52>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	da11      	bge.n	8005a1a <_puts_r+0x9e>
 80059f6:	4622      	mov	r2, r4
 80059f8:	210a      	movs	r1, #10
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 f85f 	bl	8005abe <__swbuf_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d0d7      	beq.n	80059b4 <_puts_r+0x38>
 8005a04:	250a      	movs	r5, #10
 8005a06:	e7d7      	b.n	80059b8 <_puts_r+0x3c>
 8005a08:	4622      	mov	r2, r4
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 f857 	bl	8005abe <__swbuf_r>
 8005a10:	3001      	adds	r0, #1
 8005a12:	d1e7      	bne.n	80059e4 <_puts_r+0x68>
 8005a14:	e7ce      	b.n	80059b4 <_puts_r+0x38>
 8005a16:	3e01      	subs	r6, #1
 8005a18:	e7e4      	b.n	80059e4 <_puts_r+0x68>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	6022      	str	r2, [r4, #0]
 8005a20:	220a      	movs	r2, #10
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e7ee      	b.n	8005a04 <_puts_r+0x88>
	...

08005a28 <puts>:
 8005a28:	4b02      	ldr	r3, [pc, #8]	@ (8005a34 <puts+0xc>)
 8005a2a:	4601      	mov	r1, r0
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	f7ff bfa5 	b.w	800597c <_puts_r>
 8005a32:	bf00      	nop
 8005a34:	20000018 	.word	0x20000018

08005a38 <__sread>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a40:	f000 f8fc 	bl	8005c3c <_read_r>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	bfab      	itete	ge
 8005a48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a4c:	181b      	addge	r3, r3, r0
 8005a4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a52:	bfac      	ite	ge
 8005a54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a56:	81a3      	strhlt	r3, [r4, #12]
 8005a58:	bd10      	pop	{r4, pc}

08005a5a <__swrite>:
 8005a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5e:	461f      	mov	r7, r3
 8005a60:	898b      	ldrh	r3, [r1, #12]
 8005a62:	05db      	lsls	r3, r3, #23
 8005a64:	4605      	mov	r5, r0
 8005a66:	460c      	mov	r4, r1
 8005a68:	4616      	mov	r6, r2
 8005a6a:	d505      	bpl.n	8005a78 <__swrite+0x1e>
 8005a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a70:	2302      	movs	r3, #2
 8005a72:	2200      	movs	r2, #0
 8005a74:	f000 f8d0 	bl	8005c18 <_lseek_r>
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	4632      	mov	r2, r6
 8005a86:	463b      	mov	r3, r7
 8005a88:	4628      	mov	r0, r5
 8005a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8e:	f000 b8e7 	b.w	8005c60 <_write_r>

08005a92 <__sseek>:
 8005a92:	b510      	push	{r4, lr}
 8005a94:	460c      	mov	r4, r1
 8005a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9a:	f000 f8bd 	bl	8005c18 <_lseek_r>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	bf15      	itete	ne
 8005aa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005aa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005aaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005aae:	81a3      	strheq	r3, [r4, #12]
 8005ab0:	bf18      	it	ne
 8005ab2:	81a3      	strhne	r3, [r4, #12]
 8005ab4:	bd10      	pop	{r4, pc}

08005ab6 <__sclose>:
 8005ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aba:	f000 b89d 	b.w	8005bf8 <_close_r>

08005abe <__swbuf_r>:
 8005abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac0:	460e      	mov	r6, r1
 8005ac2:	4614      	mov	r4, r2
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	b118      	cbz	r0, 8005ad0 <__swbuf_r+0x12>
 8005ac8:	6a03      	ldr	r3, [r0, #32]
 8005aca:	b90b      	cbnz	r3, 8005ad0 <__swbuf_r+0x12>
 8005acc:	f7ff ff0e 	bl	80058ec <__sinit>
 8005ad0:	69a3      	ldr	r3, [r4, #24]
 8005ad2:	60a3      	str	r3, [r4, #8]
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	071a      	lsls	r2, r3, #28
 8005ad8:	d501      	bpl.n	8005ade <__swbuf_r+0x20>
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	b943      	cbnz	r3, 8005af0 <__swbuf_r+0x32>
 8005ade:	4621      	mov	r1, r4
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f000 f82b 	bl	8005b3c <__swsetup_r>
 8005ae6:	b118      	cbz	r0, 8005af0 <__swbuf_r+0x32>
 8005ae8:	f04f 37ff 	mov.w	r7, #4294967295
 8005aec:	4638      	mov	r0, r7
 8005aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	6922      	ldr	r2, [r4, #16]
 8005af4:	1a98      	subs	r0, r3, r2
 8005af6:	6963      	ldr	r3, [r4, #20]
 8005af8:	b2f6      	uxtb	r6, r6
 8005afa:	4283      	cmp	r3, r0
 8005afc:	4637      	mov	r7, r6
 8005afe:	dc05      	bgt.n	8005b0c <__swbuf_r+0x4e>
 8005b00:	4621      	mov	r1, r4
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 fd46 	bl	8006594 <_fflush_r>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d1ed      	bne.n	8005ae8 <__swbuf_r+0x2a>
 8005b0c:	68a3      	ldr	r3, [r4, #8]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	60a3      	str	r3, [r4, #8]
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	6022      	str	r2, [r4, #0]
 8005b18:	701e      	strb	r6, [r3, #0]
 8005b1a:	6962      	ldr	r2, [r4, #20]
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d004      	beq.n	8005b2c <__swbuf_r+0x6e>
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	07db      	lsls	r3, r3, #31
 8005b26:	d5e1      	bpl.n	8005aec <__swbuf_r+0x2e>
 8005b28:	2e0a      	cmp	r6, #10
 8005b2a:	d1df      	bne.n	8005aec <__swbuf_r+0x2e>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 fd30 	bl	8006594 <_fflush_r>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d0d9      	beq.n	8005aec <__swbuf_r+0x2e>
 8005b38:	e7d6      	b.n	8005ae8 <__swbuf_r+0x2a>
	...

08005b3c <__swsetup_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4b29      	ldr	r3, [pc, #164]	@ (8005be4 <__swsetup_r+0xa8>)
 8005b40:	4605      	mov	r5, r0
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	460c      	mov	r4, r1
 8005b46:	b118      	cbz	r0, 8005b50 <__swsetup_r+0x14>
 8005b48:	6a03      	ldr	r3, [r0, #32]
 8005b4a:	b90b      	cbnz	r3, 8005b50 <__swsetup_r+0x14>
 8005b4c:	f7ff fece 	bl	80058ec <__sinit>
 8005b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b54:	0719      	lsls	r1, r3, #28
 8005b56:	d422      	bmi.n	8005b9e <__swsetup_r+0x62>
 8005b58:	06da      	lsls	r2, r3, #27
 8005b5a:	d407      	bmi.n	8005b6c <__swsetup_r+0x30>
 8005b5c:	2209      	movs	r2, #9
 8005b5e:	602a      	str	r2, [r5, #0]
 8005b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6a:	e033      	b.n	8005bd4 <__swsetup_r+0x98>
 8005b6c:	0758      	lsls	r0, r3, #29
 8005b6e:	d512      	bpl.n	8005b96 <__swsetup_r+0x5a>
 8005b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b72:	b141      	cbz	r1, 8005b86 <__swsetup_r+0x4a>
 8005b74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	d002      	beq.n	8005b82 <__swsetup_r+0x46>
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 f8bd 	bl	8005cfc <_free_r>
 8005b82:	2300      	movs	r3, #0
 8005b84:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6063      	str	r3, [r4, #4]
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	f043 0308 	orr.w	r3, r3, #8
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	b94b      	cbnz	r3, 8005bb6 <__swsetup_r+0x7a>
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bac:	d003      	beq.n	8005bb6 <__swsetup_r+0x7a>
 8005bae:	4621      	mov	r1, r4
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f000 fd3d 	bl	8006630 <__smakebuf_r>
 8005bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bba:	f013 0201 	ands.w	r2, r3, #1
 8005bbe:	d00a      	beq.n	8005bd6 <__swsetup_r+0x9a>
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	60a2      	str	r2, [r4, #8]
 8005bc4:	6962      	ldr	r2, [r4, #20]
 8005bc6:	4252      	negs	r2, r2
 8005bc8:	61a2      	str	r2, [r4, #24]
 8005bca:	6922      	ldr	r2, [r4, #16]
 8005bcc:	b942      	cbnz	r2, 8005be0 <__swsetup_r+0xa4>
 8005bce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005bd2:	d1c5      	bne.n	8005b60 <__swsetup_r+0x24>
 8005bd4:	bd38      	pop	{r3, r4, r5, pc}
 8005bd6:	0799      	lsls	r1, r3, #30
 8005bd8:	bf58      	it	pl
 8005bda:	6962      	ldrpl	r2, [r4, #20]
 8005bdc:	60a2      	str	r2, [r4, #8]
 8005bde:	e7f4      	b.n	8005bca <__swsetup_r+0x8e>
 8005be0:	2000      	movs	r0, #0
 8005be2:	e7f7      	b.n	8005bd4 <__swsetup_r+0x98>
 8005be4:	20000018 	.word	0x20000018

08005be8 <memset>:
 8005be8:	4402      	add	r2, r0
 8005bea:	4603      	mov	r3, r0
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d100      	bne.n	8005bf2 <memset+0xa>
 8005bf0:	4770      	bx	lr
 8005bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf6:	e7f9      	b.n	8005bec <memset+0x4>

08005bf8 <_close_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4d06      	ldr	r5, [pc, #24]	@ (8005c14 <_close_r+0x1c>)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4604      	mov	r4, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	602b      	str	r3, [r5, #0]
 8005c04:	f7fb f9b0 	bl	8000f68 <_close>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d102      	bne.n	8005c12 <_close_r+0x1a>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	b103      	cbz	r3, 8005c12 <_close_r+0x1a>
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
 8005c14:	20001274 	.word	0x20001274

08005c18 <_lseek_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4d07      	ldr	r5, [pc, #28]	@ (8005c38 <_lseek_r+0x20>)
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	4608      	mov	r0, r1
 8005c20:	4611      	mov	r1, r2
 8005c22:	2200      	movs	r2, #0
 8005c24:	602a      	str	r2, [r5, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f7fb f9c5 	bl	8000fb6 <_lseek>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d102      	bne.n	8005c36 <_lseek_r+0x1e>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	b103      	cbz	r3, 8005c36 <_lseek_r+0x1e>
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	20001274 	.word	0x20001274

08005c3c <_read_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4d07      	ldr	r5, [pc, #28]	@ (8005c5c <_read_r+0x20>)
 8005c40:	4604      	mov	r4, r0
 8005c42:	4608      	mov	r0, r1
 8005c44:	4611      	mov	r1, r2
 8005c46:	2200      	movs	r2, #0
 8005c48:	602a      	str	r2, [r5, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f7fb f953 	bl	8000ef6 <_read>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_read_r+0x1e>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_read_r+0x1e>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	20001274 	.word	0x20001274

08005c60 <_write_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4d07      	ldr	r5, [pc, #28]	@ (8005c80 <_write_r+0x20>)
 8005c64:	4604      	mov	r4, r0
 8005c66:	4608      	mov	r0, r1
 8005c68:	4611      	mov	r1, r2
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	602a      	str	r2, [r5, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f7fb f95e 	bl	8000f30 <_write>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_write_r+0x1e>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_write_r+0x1e>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	20001274 	.word	0x20001274

08005c84 <__errno>:
 8005c84:	4b01      	ldr	r3, [pc, #4]	@ (8005c8c <__errno+0x8>)
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000018 	.word	0x20000018

08005c90 <__libc_init_array>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	4d0d      	ldr	r5, [pc, #52]	@ (8005cc8 <__libc_init_array+0x38>)
 8005c94:	4c0d      	ldr	r4, [pc, #52]	@ (8005ccc <__libc_init_array+0x3c>)
 8005c96:	1b64      	subs	r4, r4, r5
 8005c98:	10a4      	asrs	r4, r4, #2
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	42a6      	cmp	r6, r4
 8005c9e:	d109      	bne.n	8005cb4 <__libc_init_array+0x24>
 8005ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8005cd0 <__libc_init_array+0x40>)
 8005ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8005cd4 <__libc_init_array+0x44>)
 8005ca4:	f000 fd32 	bl	800670c <_init>
 8005ca8:	1b64      	subs	r4, r4, r5
 8005caa:	10a4      	asrs	r4, r4, #2
 8005cac:	2600      	movs	r6, #0
 8005cae:	42a6      	cmp	r6, r4
 8005cb0:	d105      	bne.n	8005cbe <__libc_init_array+0x2e>
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb8:	4798      	blx	r3
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7ee      	b.n	8005c9c <__libc_init_array+0xc>
 8005cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc2:	4798      	blx	r3
 8005cc4:	3601      	adds	r6, #1
 8005cc6:	e7f2      	b.n	8005cae <__libc_init_array+0x1e>
 8005cc8:	0801c01c 	.word	0x0801c01c
 8005ccc:	0801c01c 	.word	0x0801c01c
 8005cd0:	0801c01c 	.word	0x0801c01c
 8005cd4:	0801c020 	.word	0x0801c020

08005cd8 <__retarget_lock_init_recursive>:
 8005cd8:	4770      	bx	lr

08005cda <__retarget_lock_acquire_recursive>:
 8005cda:	4770      	bx	lr

08005cdc <__retarget_lock_release_recursive>:
 8005cdc:	4770      	bx	lr

08005cde <memcpy>:
 8005cde:	440a      	add	r2, r1
 8005ce0:	4291      	cmp	r1, r2
 8005ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ce6:	d100      	bne.n	8005cea <memcpy+0xc>
 8005ce8:	4770      	bx	lr
 8005cea:	b510      	push	{r4, lr}
 8005cec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cf4:	4291      	cmp	r1, r2
 8005cf6:	d1f9      	bne.n	8005cec <memcpy+0xe>
 8005cf8:	bd10      	pop	{r4, pc}
	...

08005cfc <_free_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4605      	mov	r5, r0
 8005d00:	2900      	cmp	r1, #0
 8005d02:	d041      	beq.n	8005d88 <_free_r+0x8c>
 8005d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d08:	1f0c      	subs	r4, r1, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	bfb8      	it	lt
 8005d0e:	18e4      	addlt	r4, r4, r3
 8005d10:	f000 f8e0 	bl	8005ed4 <__malloc_lock>
 8005d14:	4a1d      	ldr	r2, [pc, #116]	@ (8005d8c <_free_r+0x90>)
 8005d16:	6813      	ldr	r3, [r2, #0]
 8005d18:	b933      	cbnz	r3, 8005d28 <_free_r+0x2c>
 8005d1a:	6063      	str	r3, [r4, #4]
 8005d1c:	6014      	str	r4, [r2, #0]
 8005d1e:	4628      	mov	r0, r5
 8005d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d24:	f000 b8dc 	b.w	8005ee0 <__malloc_unlock>
 8005d28:	42a3      	cmp	r3, r4
 8005d2a:	d908      	bls.n	8005d3e <_free_r+0x42>
 8005d2c:	6820      	ldr	r0, [r4, #0]
 8005d2e:	1821      	adds	r1, r4, r0
 8005d30:	428b      	cmp	r3, r1
 8005d32:	bf01      	itttt	eq
 8005d34:	6819      	ldreq	r1, [r3, #0]
 8005d36:	685b      	ldreq	r3, [r3, #4]
 8005d38:	1809      	addeq	r1, r1, r0
 8005d3a:	6021      	streq	r1, [r4, #0]
 8005d3c:	e7ed      	b.n	8005d1a <_free_r+0x1e>
 8005d3e:	461a      	mov	r2, r3
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	b10b      	cbz	r3, 8005d48 <_free_r+0x4c>
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	d9fa      	bls.n	8005d3e <_free_r+0x42>
 8005d48:	6811      	ldr	r1, [r2, #0]
 8005d4a:	1850      	adds	r0, r2, r1
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d10b      	bne.n	8005d68 <_free_r+0x6c>
 8005d50:	6820      	ldr	r0, [r4, #0]
 8005d52:	4401      	add	r1, r0
 8005d54:	1850      	adds	r0, r2, r1
 8005d56:	4283      	cmp	r3, r0
 8005d58:	6011      	str	r1, [r2, #0]
 8005d5a:	d1e0      	bne.n	8005d1e <_free_r+0x22>
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	6053      	str	r3, [r2, #4]
 8005d62:	4408      	add	r0, r1
 8005d64:	6010      	str	r0, [r2, #0]
 8005d66:	e7da      	b.n	8005d1e <_free_r+0x22>
 8005d68:	d902      	bls.n	8005d70 <_free_r+0x74>
 8005d6a:	230c      	movs	r3, #12
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	e7d6      	b.n	8005d1e <_free_r+0x22>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	1821      	adds	r1, r4, r0
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf04      	itt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	6063      	str	r3, [r4, #4]
 8005d7e:	bf04      	itt	eq
 8005d80:	1809      	addeq	r1, r1, r0
 8005d82:	6021      	streq	r1, [r4, #0]
 8005d84:	6054      	str	r4, [r2, #4]
 8005d86:	e7ca      	b.n	8005d1e <_free_r+0x22>
 8005d88:	bd38      	pop	{r3, r4, r5, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20001280 	.word	0x20001280

08005d90 <sbrk_aligned>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4e0f      	ldr	r6, [pc, #60]	@ (8005dd0 <sbrk_aligned+0x40>)
 8005d94:	460c      	mov	r4, r1
 8005d96:	6831      	ldr	r1, [r6, #0]
 8005d98:	4605      	mov	r5, r0
 8005d9a:	b911      	cbnz	r1, 8005da2 <sbrk_aligned+0x12>
 8005d9c:	f000 fca6 	bl	80066ec <_sbrk_r>
 8005da0:	6030      	str	r0, [r6, #0]
 8005da2:	4621      	mov	r1, r4
 8005da4:	4628      	mov	r0, r5
 8005da6:	f000 fca1 	bl	80066ec <_sbrk_r>
 8005daa:	1c43      	adds	r3, r0, #1
 8005dac:	d103      	bne.n	8005db6 <sbrk_aligned+0x26>
 8005dae:	f04f 34ff 	mov.w	r4, #4294967295
 8005db2:	4620      	mov	r0, r4
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
 8005db6:	1cc4      	adds	r4, r0, #3
 8005db8:	f024 0403 	bic.w	r4, r4, #3
 8005dbc:	42a0      	cmp	r0, r4
 8005dbe:	d0f8      	beq.n	8005db2 <sbrk_aligned+0x22>
 8005dc0:	1a21      	subs	r1, r4, r0
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f000 fc92 	bl	80066ec <_sbrk_r>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d1f2      	bne.n	8005db2 <sbrk_aligned+0x22>
 8005dcc:	e7ef      	b.n	8005dae <sbrk_aligned+0x1e>
 8005dce:	bf00      	nop
 8005dd0:	2000127c 	.word	0x2000127c

08005dd4 <_malloc_r>:
 8005dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd8:	1ccd      	adds	r5, r1, #3
 8005dda:	f025 0503 	bic.w	r5, r5, #3
 8005dde:	3508      	adds	r5, #8
 8005de0:	2d0c      	cmp	r5, #12
 8005de2:	bf38      	it	cc
 8005de4:	250c      	movcc	r5, #12
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	4606      	mov	r6, r0
 8005dea:	db01      	blt.n	8005df0 <_malloc_r+0x1c>
 8005dec:	42a9      	cmp	r1, r5
 8005dee:	d904      	bls.n	8005dfa <_malloc_r+0x26>
 8005df0:	230c      	movs	r3, #12
 8005df2:	6033      	str	r3, [r6, #0]
 8005df4:	2000      	movs	r0, #0
 8005df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ed0 <_malloc_r+0xfc>
 8005dfe:	f000 f869 	bl	8005ed4 <__malloc_lock>
 8005e02:	f8d8 3000 	ldr.w	r3, [r8]
 8005e06:	461c      	mov	r4, r3
 8005e08:	bb44      	cbnz	r4, 8005e5c <_malloc_r+0x88>
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7ff ffbf 	bl	8005d90 <sbrk_aligned>
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	4604      	mov	r4, r0
 8005e16:	d158      	bne.n	8005eca <_malloc_r+0xf6>
 8005e18:	f8d8 4000 	ldr.w	r4, [r8]
 8005e1c:	4627      	mov	r7, r4
 8005e1e:	2f00      	cmp	r7, #0
 8005e20:	d143      	bne.n	8005eaa <_malloc_r+0xd6>
 8005e22:	2c00      	cmp	r4, #0
 8005e24:	d04b      	beq.n	8005ebe <_malloc_r+0xea>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	4639      	mov	r1, r7
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	eb04 0903 	add.w	r9, r4, r3
 8005e30:	f000 fc5c 	bl	80066ec <_sbrk_r>
 8005e34:	4581      	cmp	r9, r0
 8005e36:	d142      	bne.n	8005ebe <_malloc_r+0xea>
 8005e38:	6821      	ldr	r1, [r4, #0]
 8005e3a:	1a6d      	subs	r5, r5, r1
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7ff ffa6 	bl	8005d90 <sbrk_aligned>
 8005e44:	3001      	adds	r0, #1
 8005e46:	d03a      	beq.n	8005ebe <_malloc_r+0xea>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	442b      	add	r3, r5
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	bb62      	cbnz	r2, 8005eb0 <_malloc_r+0xdc>
 8005e56:	f8c8 7000 	str.w	r7, [r8]
 8005e5a:	e00f      	b.n	8005e7c <_malloc_r+0xa8>
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	1b52      	subs	r2, r2, r5
 8005e60:	d420      	bmi.n	8005ea4 <_malloc_r+0xd0>
 8005e62:	2a0b      	cmp	r2, #11
 8005e64:	d917      	bls.n	8005e96 <_malloc_r+0xc2>
 8005e66:	1961      	adds	r1, r4, r5
 8005e68:	42a3      	cmp	r3, r4
 8005e6a:	6025      	str	r5, [r4, #0]
 8005e6c:	bf18      	it	ne
 8005e6e:	6059      	strne	r1, [r3, #4]
 8005e70:	6863      	ldr	r3, [r4, #4]
 8005e72:	bf08      	it	eq
 8005e74:	f8c8 1000 	streq.w	r1, [r8]
 8005e78:	5162      	str	r2, [r4, r5]
 8005e7a:	604b      	str	r3, [r1, #4]
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f000 f82f 	bl	8005ee0 <__malloc_unlock>
 8005e82:	f104 000b 	add.w	r0, r4, #11
 8005e86:	1d23      	adds	r3, r4, #4
 8005e88:	f020 0007 	bic.w	r0, r0, #7
 8005e8c:	1ac2      	subs	r2, r0, r3
 8005e8e:	bf1c      	itt	ne
 8005e90:	1a1b      	subne	r3, r3, r0
 8005e92:	50a3      	strne	r3, [r4, r2]
 8005e94:	e7af      	b.n	8005df6 <_malloc_r+0x22>
 8005e96:	6862      	ldr	r2, [r4, #4]
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	bf0c      	ite	eq
 8005e9c:	f8c8 2000 	streq.w	r2, [r8]
 8005ea0:	605a      	strne	r2, [r3, #4]
 8005ea2:	e7eb      	b.n	8005e7c <_malloc_r+0xa8>
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	6864      	ldr	r4, [r4, #4]
 8005ea8:	e7ae      	b.n	8005e08 <_malloc_r+0x34>
 8005eaa:	463c      	mov	r4, r7
 8005eac:	687f      	ldr	r7, [r7, #4]
 8005eae:	e7b6      	b.n	8005e1e <_malloc_r+0x4a>
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	d1fb      	bne.n	8005eb0 <_malloc_r+0xdc>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6053      	str	r3, [r2, #4]
 8005ebc:	e7de      	b.n	8005e7c <_malloc_r+0xa8>
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	6033      	str	r3, [r6, #0]
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f000 f80c 	bl	8005ee0 <__malloc_unlock>
 8005ec8:	e794      	b.n	8005df4 <_malloc_r+0x20>
 8005eca:	6005      	str	r5, [r0, #0]
 8005ecc:	e7d6      	b.n	8005e7c <_malloc_r+0xa8>
 8005ece:	bf00      	nop
 8005ed0:	20001280 	.word	0x20001280

08005ed4 <__malloc_lock>:
 8005ed4:	4801      	ldr	r0, [pc, #4]	@ (8005edc <__malloc_lock+0x8>)
 8005ed6:	f7ff bf00 	b.w	8005cda <__retarget_lock_acquire_recursive>
 8005eda:	bf00      	nop
 8005edc:	20001278 	.word	0x20001278

08005ee0 <__malloc_unlock>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	@ (8005ee8 <__malloc_unlock+0x8>)
 8005ee2:	f7ff befb 	b.w	8005cdc <__retarget_lock_release_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	20001278 	.word	0x20001278

08005eec <__sfputc_r>:
 8005eec:	6893      	ldr	r3, [r2, #8]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	b410      	push	{r4}
 8005ef4:	6093      	str	r3, [r2, #8]
 8005ef6:	da08      	bge.n	8005f0a <__sfputc_r+0x1e>
 8005ef8:	6994      	ldr	r4, [r2, #24]
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	db01      	blt.n	8005f02 <__sfputc_r+0x16>
 8005efe:	290a      	cmp	r1, #10
 8005f00:	d103      	bne.n	8005f0a <__sfputc_r+0x1e>
 8005f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f06:	f7ff bdda 	b.w	8005abe <__swbuf_r>
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	1c58      	adds	r0, r3, #1
 8005f0e:	6010      	str	r0, [r2, #0]
 8005f10:	7019      	strb	r1, [r3, #0]
 8005f12:	4608      	mov	r0, r1
 8005f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <__sfputs_r>:
 8005f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	460f      	mov	r7, r1
 8005f20:	4614      	mov	r4, r2
 8005f22:	18d5      	adds	r5, r2, r3
 8005f24:	42ac      	cmp	r4, r5
 8005f26:	d101      	bne.n	8005f2c <__sfputs_r+0x12>
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e007      	b.n	8005f3c <__sfputs_r+0x22>
 8005f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f30:	463a      	mov	r2, r7
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7ff ffda 	bl	8005eec <__sfputc_r>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d1f3      	bne.n	8005f24 <__sfputs_r+0xa>
 8005f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f40 <_vfiprintf_r>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	460d      	mov	r5, r1
 8005f46:	b09d      	sub	sp, #116	@ 0x74
 8005f48:	4614      	mov	r4, r2
 8005f4a:	4698      	mov	r8, r3
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	b118      	cbz	r0, 8005f58 <_vfiprintf_r+0x18>
 8005f50:	6a03      	ldr	r3, [r0, #32]
 8005f52:	b90b      	cbnz	r3, 8005f58 <_vfiprintf_r+0x18>
 8005f54:	f7ff fcca 	bl	80058ec <__sinit>
 8005f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f5a:	07d9      	lsls	r1, r3, #31
 8005f5c:	d405      	bmi.n	8005f6a <_vfiprintf_r+0x2a>
 8005f5e:	89ab      	ldrh	r3, [r5, #12]
 8005f60:	059a      	lsls	r2, r3, #22
 8005f62:	d402      	bmi.n	8005f6a <_vfiprintf_r+0x2a>
 8005f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f66:	f7ff feb8 	bl	8005cda <__retarget_lock_acquire_recursive>
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	071b      	lsls	r3, r3, #28
 8005f6e:	d501      	bpl.n	8005f74 <_vfiprintf_r+0x34>
 8005f70:	692b      	ldr	r3, [r5, #16]
 8005f72:	b99b      	cbnz	r3, 8005f9c <_vfiprintf_r+0x5c>
 8005f74:	4629      	mov	r1, r5
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7ff fde0 	bl	8005b3c <__swsetup_r>
 8005f7c:	b170      	cbz	r0, 8005f9c <_vfiprintf_r+0x5c>
 8005f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f80:	07dc      	lsls	r4, r3, #31
 8005f82:	d504      	bpl.n	8005f8e <_vfiprintf_r+0x4e>
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	b01d      	add	sp, #116	@ 0x74
 8005f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	0598      	lsls	r0, r3, #22
 8005f92:	d4f7      	bmi.n	8005f84 <_vfiprintf_r+0x44>
 8005f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f96:	f7ff fea1 	bl	8005cdc <__retarget_lock_release_recursive>
 8005f9a:	e7f3      	b.n	8005f84 <_vfiprintf_r+0x44>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005faa:	2330      	movs	r3, #48	@ 0x30
 8005fac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800615c <_vfiprintf_r+0x21c>
 8005fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fb4:	f04f 0901 	mov.w	r9, #1
 8005fb8:	4623      	mov	r3, r4
 8005fba:	469a      	mov	sl, r3
 8005fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fc0:	b10a      	cbz	r2, 8005fc6 <_vfiprintf_r+0x86>
 8005fc2:	2a25      	cmp	r2, #37	@ 0x25
 8005fc4:	d1f9      	bne.n	8005fba <_vfiprintf_r+0x7a>
 8005fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8005fca:	d00b      	beq.n	8005fe4 <_vfiprintf_r+0xa4>
 8005fcc:	465b      	mov	r3, fp
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7ff ffa1 	bl	8005f1a <__sfputs_r>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f000 80a7 	beq.w	800612c <_vfiprintf_r+0x1ec>
 8005fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe0:	445a      	add	r2, fp
 8005fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 809f 	beq.w	800612c <_vfiprintf_r+0x1ec>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff8:	f10a 0a01 	add.w	sl, sl, #1
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	9307      	str	r3, [sp, #28]
 8006000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006004:	931a      	str	r3, [sp, #104]	@ 0x68
 8006006:	4654      	mov	r4, sl
 8006008:	2205      	movs	r2, #5
 800600a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600e:	4853      	ldr	r0, [pc, #332]	@ (800615c <_vfiprintf_r+0x21c>)
 8006010:	f7fa f8e6 	bl	80001e0 <memchr>
 8006014:	9a04      	ldr	r2, [sp, #16]
 8006016:	b9d8      	cbnz	r0, 8006050 <_vfiprintf_r+0x110>
 8006018:	06d1      	lsls	r1, r2, #27
 800601a:	bf44      	itt	mi
 800601c:	2320      	movmi	r3, #32
 800601e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006022:	0713      	lsls	r3, r2, #28
 8006024:	bf44      	itt	mi
 8006026:	232b      	movmi	r3, #43	@ 0x2b
 8006028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800602c:	f89a 3000 	ldrb.w	r3, [sl]
 8006030:	2b2a      	cmp	r3, #42	@ 0x2a
 8006032:	d015      	beq.n	8006060 <_vfiprintf_r+0x120>
 8006034:	9a07      	ldr	r2, [sp, #28]
 8006036:	4654      	mov	r4, sl
 8006038:	2000      	movs	r0, #0
 800603a:	f04f 0c0a 	mov.w	ip, #10
 800603e:	4621      	mov	r1, r4
 8006040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006044:	3b30      	subs	r3, #48	@ 0x30
 8006046:	2b09      	cmp	r3, #9
 8006048:	d94b      	bls.n	80060e2 <_vfiprintf_r+0x1a2>
 800604a:	b1b0      	cbz	r0, 800607a <_vfiprintf_r+0x13a>
 800604c:	9207      	str	r2, [sp, #28]
 800604e:	e014      	b.n	800607a <_vfiprintf_r+0x13a>
 8006050:	eba0 0308 	sub.w	r3, r0, r8
 8006054:	fa09 f303 	lsl.w	r3, r9, r3
 8006058:	4313      	orrs	r3, r2
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	46a2      	mov	sl, r4
 800605e:	e7d2      	b.n	8006006 <_vfiprintf_r+0xc6>
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	1d19      	adds	r1, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	9103      	str	r1, [sp, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfbb      	ittet	lt
 800606c:	425b      	neglt	r3, r3
 800606e:	f042 0202 	orrlt.w	r2, r2, #2
 8006072:	9307      	strge	r3, [sp, #28]
 8006074:	9307      	strlt	r3, [sp, #28]
 8006076:	bfb8      	it	lt
 8006078:	9204      	strlt	r2, [sp, #16]
 800607a:	7823      	ldrb	r3, [r4, #0]
 800607c:	2b2e      	cmp	r3, #46	@ 0x2e
 800607e:	d10a      	bne.n	8006096 <_vfiprintf_r+0x156>
 8006080:	7863      	ldrb	r3, [r4, #1]
 8006082:	2b2a      	cmp	r3, #42	@ 0x2a
 8006084:	d132      	bne.n	80060ec <_vfiprintf_r+0x1ac>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	1d1a      	adds	r2, r3, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	9203      	str	r2, [sp, #12]
 800608e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006092:	3402      	adds	r4, #2
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800616c <_vfiprintf_r+0x22c>
 800609a:	7821      	ldrb	r1, [r4, #0]
 800609c:	2203      	movs	r2, #3
 800609e:	4650      	mov	r0, sl
 80060a0:	f7fa f89e 	bl	80001e0 <memchr>
 80060a4:	b138      	cbz	r0, 80060b6 <_vfiprintf_r+0x176>
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	eba0 000a 	sub.w	r0, r0, sl
 80060ac:	2240      	movs	r2, #64	@ 0x40
 80060ae:	4082      	lsls	r2, r0
 80060b0:	4313      	orrs	r3, r2
 80060b2:	3401      	adds	r4, #1
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ba:	4829      	ldr	r0, [pc, #164]	@ (8006160 <_vfiprintf_r+0x220>)
 80060bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060c0:	2206      	movs	r2, #6
 80060c2:	f7fa f88d 	bl	80001e0 <memchr>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d03f      	beq.n	800614a <_vfiprintf_r+0x20a>
 80060ca:	4b26      	ldr	r3, [pc, #152]	@ (8006164 <_vfiprintf_r+0x224>)
 80060cc:	bb1b      	cbnz	r3, 8006116 <_vfiprintf_r+0x1d6>
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	3307      	adds	r3, #7
 80060d2:	f023 0307 	bic.w	r3, r3, #7
 80060d6:	3308      	adds	r3, #8
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060dc:	443b      	add	r3, r7
 80060de:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e0:	e76a      	b.n	8005fb8 <_vfiprintf_r+0x78>
 80060e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060e6:	460c      	mov	r4, r1
 80060e8:	2001      	movs	r0, #1
 80060ea:	e7a8      	b.n	800603e <_vfiprintf_r+0xfe>
 80060ec:	2300      	movs	r3, #0
 80060ee:	3401      	adds	r4, #1
 80060f0:	9305      	str	r3, [sp, #20]
 80060f2:	4619      	mov	r1, r3
 80060f4:	f04f 0c0a 	mov.w	ip, #10
 80060f8:	4620      	mov	r0, r4
 80060fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060fe:	3a30      	subs	r2, #48	@ 0x30
 8006100:	2a09      	cmp	r2, #9
 8006102:	d903      	bls.n	800610c <_vfiprintf_r+0x1cc>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0c6      	beq.n	8006096 <_vfiprintf_r+0x156>
 8006108:	9105      	str	r1, [sp, #20]
 800610a:	e7c4      	b.n	8006096 <_vfiprintf_r+0x156>
 800610c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006110:	4604      	mov	r4, r0
 8006112:	2301      	movs	r3, #1
 8006114:	e7f0      	b.n	80060f8 <_vfiprintf_r+0x1b8>
 8006116:	ab03      	add	r3, sp, #12
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	462a      	mov	r2, r5
 800611c:	4b12      	ldr	r3, [pc, #72]	@ (8006168 <_vfiprintf_r+0x228>)
 800611e:	a904      	add	r1, sp, #16
 8006120:	4630      	mov	r0, r6
 8006122:	f3af 8000 	nop.w
 8006126:	4607      	mov	r7, r0
 8006128:	1c78      	adds	r0, r7, #1
 800612a:	d1d6      	bne.n	80060da <_vfiprintf_r+0x19a>
 800612c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d405      	bmi.n	800613e <_vfiprintf_r+0x1fe>
 8006132:	89ab      	ldrh	r3, [r5, #12]
 8006134:	059a      	lsls	r2, r3, #22
 8006136:	d402      	bmi.n	800613e <_vfiprintf_r+0x1fe>
 8006138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800613a:	f7ff fdcf 	bl	8005cdc <__retarget_lock_release_recursive>
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	065b      	lsls	r3, r3, #25
 8006142:	f53f af1f 	bmi.w	8005f84 <_vfiprintf_r+0x44>
 8006146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006148:	e71e      	b.n	8005f88 <_vfiprintf_r+0x48>
 800614a:	ab03      	add	r3, sp, #12
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	462a      	mov	r2, r5
 8006150:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <_vfiprintf_r+0x228>)
 8006152:	a904      	add	r1, sp, #16
 8006154:	4630      	mov	r0, r6
 8006156:	f000 f879 	bl	800624c <_printf_i>
 800615a:	e7e4      	b.n	8006126 <_vfiprintf_r+0x1e6>
 800615c:	0801bfe0 	.word	0x0801bfe0
 8006160:	0801bfea 	.word	0x0801bfea
 8006164:	00000000 	.word	0x00000000
 8006168:	08005f1b 	.word	0x08005f1b
 800616c:	0801bfe6 	.word	0x0801bfe6

08006170 <_printf_common>:
 8006170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006174:	4616      	mov	r6, r2
 8006176:	4698      	mov	r8, r3
 8006178:	688a      	ldr	r2, [r1, #8]
 800617a:	690b      	ldr	r3, [r1, #16]
 800617c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006180:	4293      	cmp	r3, r2
 8006182:	bfb8      	it	lt
 8006184:	4613      	movlt	r3, r2
 8006186:	6033      	str	r3, [r6, #0]
 8006188:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800618c:	4607      	mov	r7, r0
 800618e:	460c      	mov	r4, r1
 8006190:	b10a      	cbz	r2, 8006196 <_printf_common+0x26>
 8006192:	3301      	adds	r3, #1
 8006194:	6033      	str	r3, [r6, #0]
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	0699      	lsls	r1, r3, #26
 800619a:	bf42      	ittt	mi
 800619c:	6833      	ldrmi	r3, [r6, #0]
 800619e:	3302      	addmi	r3, #2
 80061a0:	6033      	strmi	r3, [r6, #0]
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	f015 0506 	ands.w	r5, r5, #6
 80061a8:	d106      	bne.n	80061b8 <_printf_common+0x48>
 80061aa:	f104 0a19 	add.w	sl, r4, #25
 80061ae:	68e3      	ldr	r3, [r4, #12]
 80061b0:	6832      	ldr	r2, [r6, #0]
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	42ab      	cmp	r3, r5
 80061b6:	dc26      	bgt.n	8006206 <_printf_common+0x96>
 80061b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	3b00      	subs	r3, #0
 80061c0:	bf18      	it	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	0692      	lsls	r2, r2, #26
 80061c6:	d42b      	bmi.n	8006220 <_printf_common+0xb0>
 80061c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061cc:	4641      	mov	r1, r8
 80061ce:	4638      	mov	r0, r7
 80061d0:	47c8      	blx	r9
 80061d2:	3001      	adds	r0, #1
 80061d4:	d01e      	beq.n	8006214 <_printf_common+0xa4>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	6922      	ldr	r2, [r4, #16]
 80061da:	f003 0306 	and.w	r3, r3, #6
 80061de:	2b04      	cmp	r3, #4
 80061e0:	bf02      	ittt	eq
 80061e2:	68e5      	ldreq	r5, [r4, #12]
 80061e4:	6833      	ldreq	r3, [r6, #0]
 80061e6:	1aed      	subeq	r5, r5, r3
 80061e8:	68a3      	ldr	r3, [r4, #8]
 80061ea:	bf0c      	ite	eq
 80061ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061f0:	2500      	movne	r5, #0
 80061f2:	4293      	cmp	r3, r2
 80061f4:	bfc4      	itt	gt
 80061f6:	1a9b      	subgt	r3, r3, r2
 80061f8:	18ed      	addgt	r5, r5, r3
 80061fa:	2600      	movs	r6, #0
 80061fc:	341a      	adds	r4, #26
 80061fe:	42b5      	cmp	r5, r6
 8006200:	d11a      	bne.n	8006238 <_printf_common+0xc8>
 8006202:	2000      	movs	r0, #0
 8006204:	e008      	b.n	8006218 <_printf_common+0xa8>
 8006206:	2301      	movs	r3, #1
 8006208:	4652      	mov	r2, sl
 800620a:	4641      	mov	r1, r8
 800620c:	4638      	mov	r0, r7
 800620e:	47c8      	blx	r9
 8006210:	3001      	adds	r0, #1
 8006212:	d103      	bne.n	800621c <_printf_common+0xac>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621c:	3501      	adds	r5, #1
 800621e:	e7c6      	b.n	80061ae <_printf_common+0x3e>
 8006220:	18e1      	adds	r1, r4, r3
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	2030      	movs	r0, #48	@ 0x30
 8006226:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800622a:	4422      	add	r2, r4
 800622c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006230:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006234:	3302      	adds	r3, #2
 8006236:	e7c7      	b.n	80061c8 <_printf_common+0x58>
 8006238:	2301      	movs	r3, #1
 800623a:	4622      	mov	r2, r4
 800623c:	4641      	mov	r1, r8
 800623e:	4638      	mov	r0, r7
 8006240:	47c8      	blx	r9
 8006242:	3001      	adds	r0, #1
 8006244:	d0e6      	beq.n	8006214 <_printf_common+0xa4>
 8006246:	3601      	adds	r6, #1
 8006248:	e7d9      	b.n	80061fe <_printf_common+0x8e>
	...

0800624c <_printf_i>:
 800624c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006250:	7e0f      	ldrb	r7, [r1, #24]
 8006252:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006254:	2f78      	cmp	r7, #120	@ 0x78
 8006256:	4691      	mov	r9, r2
 8006258:	4680      	mov	r8, r0
 800625a:	460c      	mov	r4, r1
 800625c:	469a      	mov	sl, r3
 800625e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006262:	d807      	bhi.n	8006274 <_printf_i+0x28>
 8006264:	2f62      	cmp	r7, #98	@ 0x62
 8006266:	d80a      	bhi.n	800627e <_printf_i+0x32>
 8006268:	2f00      	cmp	r7, #0
 800626a:	f000 80d2 	beq.w	8006412 <_printf_i+0x1c6>
 800626e:	2f58      	cmp	r7, #88	@ 0x58
 8006270:	f000 80b9 	beq.w	80063e6 <_printf_i+0x19a>
 8006274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006278:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800627c:	e03a      	b.n	80062f4 <_printf_i+0xa8>
 800627e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006282:	2b15      	cmp	r3, #21
 8006284:	d8f6      	bhi.n	8006274 <_printf_i+0x28>
 8006286:	a101      	add	r1, pc, #4	@ (adr r1, 800628c <_printf_i+0x40>)
 8006288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800628c:	080062e5 	.word	0x080062e5
 8006290:	080062f9 	.word	0x080062f9
 8006294:	08006275 	.word	0x08006275
 8006298:	08006275 	.word	0x08006275
 800629c:	08006275 	.word	0x08006275
 80062a0:	08006275 	.word	0x08006275
 80062a4:	080062f9 	.word	0x080062f9
 80062a8:	08006275 	.word	0x08006275
 80062ac:	08006275 	.word	0x08006275
 80062b0:	08006275 	.word	0x08006275
 80062b4:	08006275 	.word	0x08006275
 80062b8:	080063f9 	.word	0x080063f9
 80062bc:	08006323 	.word	0x08006323
 80062c0:	080063b3 	.word	0x080063b3
 80062c4:	08006275 	.word	0x08006275
 80062c8:	08006275 	.word	0x08006275
 80062cc:	0800641b 	.word	0x0800641b
 80062d0:	08006275 	.word	0x08006275
 80062d4:	08006323 	.word	0x08006323
 80062d8:	08006275 	.word	0x08006275
 80062dc:	08006275 	.word	0x08006275
 80062e0:	080063bb 	.word	0x080063bb
 80062e4:	6833      	ldr	r3, [r6, #0]
 80062e6:	1d1a      	adds	r2, r3, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6032      	str	r2, [r6, #0]
 80062ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062f4:	2301      	movs	r3, #1
 80062f6:	e09d      	b.n	8006434 <_printf_i+0x1e8>
 80062f8:	6833      	ldr	r3, [r6, #0]
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	1d19      	adds	r1, r3, #4
 80062fe:	6031      	str	r1, [r6, #0]
 8006300:	0606      	lsls	r6, r0, #24
 8006302:	d501      	bpl.n	8006308 <_printf_i+0xbc>
 8006304:	681d      	ldr	r5, [r3, #0]
 8006306:	e003      	b.n	8006310 <_printf_i+0xc4>
 8006308:	0645      	lsls	r5, r0, #25
 800630a:	d5fb      	bpl.n	8006304 <_printf_i+0xb8>
 800630c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006310:	2d00      	cmp	r5, #0
 8006312:	da03      	bge.n	800631c <_printf_i+0xd0>
 8006314:	232d      	movs	r3, #45	@ 0x2d
 8006316:	426d      	negs	r5, r5
 8006318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800631c:	4859      	ldr	r0, [pc, #356]	@ (8006484 <_printf_i+0x238>)
 800631e:	230a      	movs	r3, #10
 8006320:	e011      	b.n	8006346 <_printf_i+0xfa>
 8006322:	6821      	ldr	r1, [r4, #0]
 8006324:	6833      	ldr	r3, [r6, #0]
 8006326:	0608      	lsls	r0, r1, #24
 8006328:	f853 5b04 	ldr.w	r5, [r3], #4
 800632c:	d402      	bmi.n	8006334 <_printf_i+0xe8>
 800632e:	0649      	lsls	r1, r1, #25
 8006330:	bf48      	it	mi
 8006332:	b2ad      	uxthmi	r5, r5
 8006334:	2f6f      	cmp	r7, #111	@ 0x6f
 8006336:	4853      	ldr	r0, [pc, #332]	@ (8006484 <_printf_i+0x238>)
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	bf14      	ite	ne
 800633c:	230a      	movne	r3, #10
 800633e:	2308      	moveq	r3, #8
 8006340:	2100      	movs	r1, #0
 8006342:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006346:	6866      	ldr	r6, [r4, #4]
 8006348:	60a6      	str	r6, [r4, #8]
 800634a:	2e00      	cmp	r6, #0
 800634c:	bfa2      	ittt	ge
 800634e:	6821      	ldrge	r1, [r4, #0]
 8006350:	f021 0104 	bicge.w	r1, r1, #4
 8006354:	6021      	strge	r1, [r4, #0]
 8006356:	b90d      	cbnz	r5, 800635c <_printf_i+0x110>
 8006358:	2e00      	cmp	r6, #0
 800635a:	d04b      	beq.n	80063f4 <_printf_i+0x1a8>
 800635c:	4616      	mov	r6, r2
 800635e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006362:	fb03 5711 	mls	r7, r3, r1, r5
 8006366:	5dc7      	ldrb	r7, [r0, r7]
 8006368:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800636c:	462f      	mov	r7, r5
 800636e:	42bb      	cmp	r3, r7
 8006370:	460d      	mov	r5, r1
 8006372:	d9f4      	bls.n	800635e <_printf_i+0x112>
 8006374:	2b08      	cmp	r3, #8
 8006376:	d10b      	bne.n	8006390 <_printf_i+0x144>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	07df      	lsls	r7, r3, #31
 800637c:	d508      	bpl.n	8006390 <_printf_i+0x144>
 800637e:	6923      	ldr	r3, [r4, #16]
 8006380:	6861      	ldr	r1, [r4, #4]
 8006382:	4299      	cmp	r1, r3
 8006384:	bfde      	ittt	le
 8006386:	2330      	movle	r3, #48	@ 0x30
 8006388:	f806 3c01 	strble.w	r3, [r6, #-1]
 800638c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006390:	1b92      	subs	r2, r2, r6
 8006392:	6122      	str	r2, [r4, #16]
 8006394:	f8cd a000 	str.w	sl, [sp]
 8006398:	464b      	mov	r3, r9
 800639a:	aa03      	add	r2, sp, #12
 800639c:	4621      	mov	r1, r4
 800639e:	4640      	mov	r0, r8
 80063a0:	f7ff fee6 	bl	8006170 <_printf_common>
 80063a4:	3001      	adds	r0, #1
 80063a6:	d14a      	bne.n	800643e <_printf_i+0x1f2>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	b004      	add	sp, #16
 80063ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	f043 0320 	orr.w	r3, r3, #32
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	4833      	ldr	r0, [pc, #204]	@ (8006488 <_printf_i+0x23c>)
 80063bc:	2778      	movs	r7, #120	@ 0x78
 80063be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	6831      	ldr	r1, [r6, #0]
 80063c6:	061f      	lsls	r7, r3, #24
 80063c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80063cc:	d402      	bmi.n	80063d4 <_printf_i+0x188>
 80063ce:	065f      	lsls	r7, r3, #25
 80063d0:	bf48      	it	mi
 80063d2:	b2ad      	uxthmi	r5, r5
 80063d4:	6031      	str	r1, [r6, #0]
 80063d6:	07d9      	lsls	r1, r3, #31
 80063d8:	bf44      	itt	mi
 80063da:	f043 0320 	orrmi.w	r3, r3, #32
 80063de:	6023      	strmi	r3, [r4, #0]
 80063e0:	b11d      	cbz	r5, 80063ea <_printf_i+0x19e>
 80063e2:	2310      	movs	r3, #16
 80063e4:	e7ac      	b.n	8006340 <_printf_i+0xf4>
 80063e6:	4827      	ldr	r0, [pc, #156]	@ (8006484 <_printf_i+0x238>)
 80063e8:	e7e9      	b.n	80063be <_printf_i+0x172>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	f023 0320 	bic.w	r3, r3, #32
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	e7f6      	b.n	80063e2 <_printf_i+0x196>
 80063f4:	4616      	mov	r6, r2
 80063f6:	e7bd      	b.n	8006374 <_printf_i+0x128>
 80063f8:	6833      	ldr	r3, [r6, #0]
 80063fa:	6825      	ldr	r5, [r4, #0]
 80063fc:	6961      	ldr	r1, [r4, #20]
 80063fe:	1d18      	adds	r0, r3, #4
 8006400:	6030      	str	r0, [r6, #0]
 8006402:	062e      	lsls	r6, r5, #24
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	d501      	bpl.n	800640c <_printf_i+0x1c0>
 8006408:	6019      	str	r1, [r3, #0]
 800640a:	e002      	b.n	8006412 <_printf_i+0x1c6>
 800640c:	0668      	lsls	r0, r5, #25
 800640e:	d5fb      	bpl.n	8006408 <_printf_i+0x1bc>
 8006410:	8019      	strh	r1, [r3, #0]
 8006412:	2300      	movs	r3, #0
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	4616      	mov	r6, r2
 8006418:	e7bc      	b.n	8006394 <_printf_i+0x148>
 800641a:	6833      	ldr	r3, [r6, #0]
 800641c:	1d1a      	adds	r2, r3, #4
 800641e:	6032      	str	r2, [r6, #0]
 8006420:	681e      	ldr	r6, [r3, #0]
 8006422:	6862      	ldr	r2, [r4, #4]
 8006424:	2100      	movs	r1, #0
 8006426:	4630      	mov	r0, r6
 8006428:	f7f9 feda 	bl	80001e0 <memchr>
 800642c:	b108      	cbz	r0, 8006432 <_printf_i+0x1e6>
 800642e:	1b80      	subs	r0, r0, r6
 8006430:	6060      	str	r0, [r4, #4]
 8006432:	6863      	ldr	r3, [r4, #4]
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	2300      	movs	r3, #0
 8006438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800643c:	e7aa      	b.n	8006394 <_printf_i+0x148>
 800643e:	6923      	ldr	r3, [r4, #16]
 8006440:	4632      	mov	r2, r6
 8006442:	4649      	mov	r1, r9
 8006444:	4640      	mov	r0, r8
 8006446:	47d0      	blx	sl
 8006448:	3001      	adds	r0, #1
 800644a:	d0ad      	beq.n	80063a8 <_printf_i+0x15c>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	079b      	lsls	r3, r3, #30
 8006450:	d413      	bmi.n	800647a <_printf_i+0x22e>
 8006452:	68e0      	ldr	r0, [r4, #12]
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	4298      	cmp	r0, r3
 8006458:	bfb8      	it	lt
 800645a:	4618      	movlt	r0, r3
 800645c:	e7a6      	b.n	80063ac <_printf_i+0x160>
 800645e:	2301      	movs	r3, #1
 8006460:	4632      	mov	r2, r6
 8006462:	4649      	mov	r1, r9
 8006464:	4640      	mov	r0, r8
 8006466:	47d0      	blx	sl
 8006468:	3001      	adds	r0, #1
 800646a:	d09d      	beq.n	80063a8 <_printf_i+0x15c>
 800646c:	3501      	adds	r5, #1
 800646e:	68e3      	ldr	r3, [r4, #12]
 8006470:	9903      	ldr	r1, [sp, #12]
 8006472:	1a5b      	subs	r3, r3, r1
 8006474:	42ab      	cmp	r3, r5
 8006476:	dcf2      	bgt.n	800645e <_printf_i+0x212>
 8006478:	e7eb      	b.n	8006452 <_printf_i+0x206>
 800647a:	2500      	movs	r5, #0
 800647c:	f104 0619 	add.w	r6, r4, #25
 8006480:	e7f5      	b.n	800646e <_printf_i+0x222>
 8006482:	bf00      	nop
 8006484:	0801bff1 	.word	0x0801bff1
 8006488:	0801c002 	.word	0x0801c002

0800648c <__sflush_r>:
 800648c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006494:	0716      	lsls	r6, r2, #28
 8006496:	4605      	mov	r5, r0
 8006498:	460c      	mov	r4, r1
 800649a:	d454      	bmi.n	8006546 <__sflush_r+0xba>
 800649c:	684b      	ldr	r3, [r1, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	dc02      	bgt.n	80064a8 <__sflush_r+0x1c>
 80064a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	dd48      	ble.n	800653a <__sflush_r+0xae>
 80064a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	d045      	beq.n	800653a <__sflush_r+0xae>
 80064ae:	2300      	movs	r3, #0
 80064b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064b4:	682f      	ldr	r7, [r5, #0]
 80064b6:	6a21      	ldr	r1, [r4, #32]
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	d030      	beq.n	800651e <__sflush_r+0x92>
 80064bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	0759      	lsls	r1, r3, #29
 80064c2:	d505      	bpl.n	80064d0 <__sflush_r+0x44>
 80064c4:	6863      	ldr	r3, [r4, #4]
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064ca:	b10b      	cbz	r3, 80064d0 <__sflush_r+0x44>
 80064cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	2300      	movs	r3, #0
 80064d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064d4:	6a21      	ldr	r1, [r4, #32]
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b0      	blx	r6
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	d106      	bne.n	80064ee <__sflush_r+0x62>
 80064e0:	6829      	ldr	r1, [r5, #0]
 80064e2:	291d      	cmp	r1, #29
 80064e4:	d82b      	bhi.n	800653e <__sflush_r+0xb2>
 80064e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006590 <__sflush_r+0x104>)
 80064e8:	410a      	asrs	r2, r1
 80064ea:	07d6      	lsls	r6, r2, #31
 80064ec:	d427      	bmi.n	800653e <__sflush_r+0xb2>
 80064ee:	2200      	movs	r2, #0
 80064f0:	6062      	str	r2, [r4, #4]
 80064f2:	04d9      	lsls	r1, r3, #19
 80064f4:	6922      	ldr	r2, [r4, #16]
 80064f6:	6022      	str	r2, [r4, #0]
 80064f8:	d504      	bpl.n	8006504 <__sflush_r+0x78>
 80064fa:	1c42      	adds	r2, r0, #1
 80064fc:	d101      	bne.n	8006502 <__sflush_r+0x76>
 80064fe:	682b      	ldr	r3, [r5, #0]
 8006500:	b903      	cbnz	r3, 8006504 <__sflush_r+0x78>
 8006502:	6560      	str	r0, [r4, #84]	@ 0x54
 8006504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006506:	602f      	str	r7, [r5, #0]
 8006508:	b1b9      	cbz	r1, 800653a <__sflush_r+0xae>
 800650a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800650e:	4299      	cmp	r1, r3
 8006510:	d002      	beq.n	8006518 <__sflush_r+0x8c>
 8006512:	4628      	mov	r0, r5
 8006514:	f7ff fbf2 	bl	8005cfc <_free_r>
 8006518:	2300      	movs	r3, #0
 800651a:	6363      	str	r3, [r4, #52]	@ 0x34
 800651c:	e00d      	b.n	800653a <__sflush_r+0xae>
 800651e:	2301      	movs	r3, #1
 8006520:	4628      	mov	r0, r5
 8006522:	47b0      	blx	r6
 8006524:	4602      	mov	r2, r0
 8006526:	1c50      	adds	r0, r2, #1
 8006528:	d1c9      	bne.n	80064be <__sflush_r+0x32>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0c6      	beq.n	80064be <__sflush_r+0x32>
 8006530:	2b1d      	cmp	r3, #29
 8006532:	d001      	beq.n	8006538 <__sflush_r+0xac>
 8006534:	2b16      	cmp	r3, #22
 8006536:	d11e      	bne.n	8006576 <__sflush_r+0xea>
 8006538:	602f      	str	r7, [r5, #0]
 800653a:	2000      	movs	r0, #0
 800653c:	e022      	b.n	8006584 <__sflush_r+0xf8>
 800653e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006542:	b21b      	sxth	r3, r3
 8006544:	e01b      	b.n	800657e <__sflush_r+0xf2>
 8006546:	690f      	ldr	r7, [r1, #16]
 8006548:	2f00      	cmp	r7, #0
 800654a:	d0f6      	beq.n	800653a <__sflush_r+0xae>
 800654c:	0793      	lsls	r3, r2, #30
 800654e:	680e      	ldr	r6, [r1, #0]
 8006550:	bf08      	it	eq
 8006552:	694b      	ldreq	r3, [r1, #20]
 8006554:	600f      	str	r7, [r1, #0]
 8006556:	bf18      	it	ne
 8006558:	2300      	movne	r3, #0
 800655a:	eba6 0807 	sub.w	r8, r6, r7
 800655e:	608b      	str	r3, [r1, #8]
 8006560:	f1b8 0f00 	cmp.w	r8, #0
 8006564:	dde9      	ble.n	800653a <__sflush_r+0xae>
 8006566:	6a21      	ldr	r1, [r4, #32]
 8006568:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800656a:	4643      	mov	r3, r8
 800656c:	463a      	mov	r2, r7
 800656e:	4628      	mov	r0, r5
 8006570:	47b0      	blx	r6
 8006572:	2800      	cmp	r0, #0
 8006574:	dc08      	bgt.n	8006588 <__sflush_r+0xfc>
 8006576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006588:	4407      	add	r7, r0
 800658a:	eba8 0800 	sub.w	r8, r8, r0
 800658e:	e7e7      	b.n	8006560 <__sflush_r+0xd4>
 8006590:	dfbffffe 	.word	0xdfbffffe

08006594 <_fflush_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	690b      	ldr	r3, [r1, #16]
 8006598:	4605      	mov	r5, r0
 800659a:	460c      	mov	r4, r1
 800659c:	b913      	cbnz	r3, 80065a4 <_fflush_r+0x10>
 800659e:	2500      	movs	r5, #0
 80065a0:	4628      	mov	r0, r5
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	b118      	cbz	r0, 80065ae <_fflush_r+0x1a>
 80065a6:	6a03      	ldr	r3, [r0, #32]
 80065a8:	b90b      	cbnz	r3, 80065ae <_fflush_r+0x1a>
 80065aa:	f7ff f99f 	bl	80058ec <__sinit>
 80065ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f3      	beq.n	800659e <_fflush_r+0xa>
 80065b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065b8:	07d0      	lsls	r0, r2, #31
 80065ba:	d404      	bmi.n	80065c6 <_fflush_r+0x32>
 80065bc:	0599      	lsls	r1, r3, #22
 80065be:	d402      	bmi.n	80065c6 <_fflush_r+0x32>
 80065c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065c2:	f7ff fb8a 	bl	8005cda <__retarget_lock_acquire_recursive>
 80065c6:	4628      	mov	r0, r5
 80065c8:	4621      	mov	r1, r4
 80065ca:	f7ff ff5f 	bl	800648c <__sflush_r>
 80065ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065d0:	07da      	lsls	r2, r3, #31
 80065d2:	4605      	mov	r5, r0
 80065d4:	d4e4      	bmi.n	80065a0 <_fflush_r+0xc>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	059b      	lsls	r3, r3, #22
 80065da:	d4e1      	bmi.n	80065a0 <_fflush_r+0xc>
 80065dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065de:	f7ff fb7d 	bl	8005cdc <__retarget_lock_release_recursive>
 80065e2:	e7dd      	b.n	80065a0 <_fflush_r+0xc>

080065e4 <__swhatbuf_r>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	460c      	mov	r4, r1
 80065e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ec:	2900      	cmp	r1, #0
 80065ee:	b096      	sub	sp, #88	@ 0x58
 80065f0:	4615      	mov	r5, r2
 80065f2:	461e      	mov	r6, r3
 80065f4:	da0d      	bge.n	8006612 <__swhatbuf_r+0x2e>
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065fc:	f04f 0100 	mov.w	r1, #0
 8006600:	bf14      	ite	ne
 8006602:	2340      	movne	r3, #64	@ 0x40
 8006604:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006608:	2000      	movs	r0, #0
 800660a:	6031      	str	r1, [r6, #0]
 800660c:	602b      	str	r3, [r5, #0]
 800660e:	b016      	add	sp, #88	@ 0x58
 8006610:	bd70      	pop	{r4, r5, r6, pc}
 8006612:	466a      	mov	r2, sp
 8006614:	f000 f848 	bl	80066a8 <_fstat_r>
 8006618:	2800      	cmp	r0, #0
 800661a:	dbec      	blt.n	80065f6 <__swhatbuf_r+0x12>
 800661c:	9901      	ldr	r1, [sp, #4]
 800661e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006622:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006626:	4259      	negs	r1, r3
 8006628:	4159      	adcs	r1, r3
 800662a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800662e:	e7eb      	b.n	8006608 <__swhatbuf_r+0x24>

08006630 <__smakebuf_r>:
 8006630:	898b      	ldrh	r3, [r1, #12]
 8006632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006634:	079d      	lsls	r5, r3, #30
 8006636:	4606      	mov	r6, r0
 8006638:	460c      	mov	r4, r1
 800663a:	d507      	bpl.n	800664c <__smakebuf_r+0x1c>
 800663c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	6123      	str	r3, [r4, #16]
 8006644:	2301      	movs	r3, #1
 8006646:	6163      	str	r3, [r4, #20]
 8006648:	b003      	add	sp, #12
 800664a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664c:	ab01      	add	r3, sp, #4
 800664e:	466a      	mov	r2, sp
 8006650:	f7ff ffc8 	bl	80065e4 <__swhatbuf_r>
 8006654:	9f00      	ldr	r7, [sp, #0]
 8006656:	4605      	mov	r5, r0
 8006658:	4639      	mov	r1, r7
 800665a:	4630      	mov	r0, r6
 800665c:	f7ff fbba 	bl	8005dd4 <_malloc_r>
 8006660:	b948      	cbnz	r0, 8006676 <__smakebuf_r+0x46>
 8006662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006666:	059a      	lsls	r2, r3, #22
 8006668:	d4ee      	bmi.n	8006648 <__smakebuf_r+0x18>
 800666a:	f023 0303 	bic.w	r3, r3, #3
 800666e:	f043 0302 	orr.w	r3, r3, #2
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	e7e2      	b.n	800663c <__smakebuf_r+0xc>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	6020      	str	r0, [r4, #0]
 800667a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	9b01      	ldr	r3, [sp, #4]
 8006682:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006686:	b15b      	cbz	r3, 80066a0 <__smakebuf_r+0x70>
 8006688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800668c:	4630      	mov	r0, r6
 800668e:	f000 f81d 	bl	80066cc <_isatty_r>
 8006692:	b128      	cbz	r0, 80066a0 <__smakebuf_r+0x70>
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	f023 0303 	bic.w	r3, r3, #3
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	431d      	orrs	r5, r3
 80066a4:	81a5      	strh	r5, [r4, #12]
 80066a6:	e7cf      	b.n	8006648 <__smakebuf_r+0x18>

080066a8 <_fstat_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	@ (80066c8 <_fstat_r+0x20>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	f7fa fc63 	bl	8000f80 <_fstat>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d102      	bne.n	80066c4 <_fstat_r+0x1c>
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	b103      	cbz	r3, 80066c4 <_fstat_r+0x1c>
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	bd38      	pop	{r3, r4, r5, pc}
 80066c6:	bf00      	nop
 80066c8:	20001274 	.word	0x20001274

080066cc <_isatty_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d06      	ldr	r5, [pc, #24]	@ (80066e8 <_isatty_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fa fc62 	bl	8000fa0 <_isatty>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_isatty_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_isatty_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	20001274 	.word	0x20001274

080066ec <_sbrk_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4d06      	ldr	r5, [pc, #24]	@ (8006708 <_sbrk_r+0x1c>)
 80066f0:	2300      	movs	r3, #0
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	f7fa fc6a 	bl	8000fd0 <_sbrk>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_sbrk_r+0x1a>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_sbrk_r+0x1a>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	20001274 	.word	0x20001274

0800670c <_init>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	bf00      	nop
 8006710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006712:	bc08      	pop	{r3}
 8006714:	469e      	mov	lr, r3
 8006716:	4770      	bx	lr

08006718 <_fini>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr
